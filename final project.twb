<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20183.18.1219.1533                               -->
<workbook original-version='18.1' source-build='2018.3.2 (20183.18.1219.1533)' source-platform='mac' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <CascadingFilters />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
    <ZoneBackgroundTransparency />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource caption='dftab1_melt_pivot1' inline='true' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='dftab1_melt_pivot1' name='textscan.0s9pg2e0kla8d819vitow1xcwkbo'>
            <connection class='textscan' directory='/Users/lijiahuan/Desktop' filename='dftab1_melt_pivot1.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.0s9pg2e0kla8d819vitow1xcwkbo' name='dftab1_melt_pivot1.csv' table='[dftab1_melt_pivot1#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='string' name='rowindex' ordinal='0' />
            <column datatype='real' name='Adjusted net savings (% of GNI)' ordinal='1' />
            <column datatype='real' name='Adolescent birth rate (births per 1,000 women ages 15-19)' ordinal='2' />
            <column datatype='real' name='Antenatal care coverage, at least one visit (%)' ordinal='3' />
            <column datatype='real' name='Birth registration (% under age 5)' ordinal='4' />
            <column datatype='real' name='Carbon dioxide emissions (kg per 2011 PPP $ of GDP)' ordinal='5' />
            <column datatype='real' name='Carbon dioxide emissions, per capita (tonnes)' ordinal='6' />
            <column datatype='real' name='Child labour (% ages 5-17)' ordinal='7' />
            <column datatype='real' name='Child malnutrition, stunting (moderate or severe) (% under age 5)' ordinal='8' />
            <column datatype='real' name='Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)' ordinal='9' />
            <column datatype='real' name='Coefficient of human inequality' ordinal='10' />
            <column datatype='real' name='Concentration index (exports) (value)' ordinal='11' />
            <column datatype='real' name='Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)' ordinal='12' />
            <column datatype='real' name='Current health expenditure (% of GDP)' ordinal='13' />
            <column datatype='real' name='Domestic credit provided by financial sector (% of GDP)' ordinal='14' />
            <column datatype='real' name='Education index' ordinal='15' />
            <column datatype='real' name='Employment in agriculture (% of total employment)' ordinal='16' />
            <column datatype='real' name='Employment in services (% of total employment)' ordinal='17' />
            <column datatype='real' name='Employment to population ratio (% ages 15 and older)' ordinal='18' />
            <column datatype='real' name='Estimated gross national income per capita, female (2011 PPP $)' ordinal='19' />
            <column datatype='real' name='Estimated gross national income per capita, male (2011 PPP $)' ordinal='20' />
            <column datatype='real' name='Expected years of schooling (years)' ordinal='21' />
            <column datatype='real' name='Expected years of schooling, female (years)' ordinal='22' />
            <column datatype='real' name='Expected years of schooling, male (years)' ordinal='23' />
            <column datatype='real' name='Exports and imports (% of GDP)' ordinal='24' />
            <column datatype='real' name='Female share of employment in senior and middle management (%)' ordinal='25' />
            <column datatype='real' name='Female share of graduates in science, mathematics, engineering, manufacturing and construction at tertiary level (%)' ordinal='26' />
            <column datatype='real' name='Foreign direct investment, net inflows (% of GDP)' ordinal='27' />
            <column datatype='real' name='Forest area (% of total land area)' ordinal='28' />
            <column datatype='real' name='Forest area, change (%)' ordinal='29' />
            <column datatype='real' name='Fossil fuel energy consumption (% of total energy consumption)' ordinal='30' />
            <column datatype='real' name='Fresh water withdrawals (% of total renewable water resources)' ordinal='31' />
            <column datatype='real' name='GDP per capita (2011 PPP $)' ordinal='32' />
            <column datatype='real' name='Gender Development Index (GDI)' ordinal='33' />
            <column datatype='real' name='Gender Inequality Index (GII)' ordinal='34' />
            <column datatype='real' name='Government expenditure on education (% of GDP)' ordinal='35' />
            <column datatype='real' name='Gross capital formation (% of GDP)' ordinal='36' />
            <column datatype='real' name='Gross domestic product (GDP), total (2011 PPP $ billions)' ordinal='37' />
            <column datatype='real' name='Gross enrolment ratio, pre-primary (% of preschool-age children)' ordinal='38' />
            <column datatype='real' name='Gross enrolment ratio, primary (% of primary school-age population)' ordinal='39' />
            <column datatype='real' name='Gross enrolment ratio, secondary (% of secondary school-age population)' ordinal='40' />
            <column datatype='real' name='Gross enrolment ratio, tertiary (% of tertiary school-age population)' ordinal='41' />
            <column datatype='real' name='Gross fixed capital formation (% of GDP)' ordinal='42' />
            <column datatype='real' name='Gross national income (GNI) per capita (2011 PPP $)' ordinal='43' />
            <column datatype='real' name='HDI rank' ordinal='44' />
            <column datatype='real' name='HIV prevalence, adult (% ages 15-49)' ordinal='45' />
            <column datatype='real' name='Homeless people due to natural disaster (average annual per million people)' ordinal='46' />
            <column datatype='real' name='Homicide rate (per 100,000 people)' ordinal='47' />
            <column datatype='real' name='Human Development Index (HDI)' ordinal='48' />
            <column datatype='real' name='Human Development Index (HDI), female' ordinal='49' />
            <column datatype='real' name='Human Development Index (HDI), male' ordinal='50' />
            <column datatype='real' name='Income index' ordinal='51' />
            <column datatype='real' name='Income inequality, Gini coefficient' ordinal='52' />
            <column datatype='real' name='Income inequality, Palma ratio' ordinal='53' />
            <column datatype='real' name='Income inequality, quintile ratio' ordinal='54' />
            <column datatype='real' name='Income quintile ratio, average annual change (%)' ordinal='55' />
            <column datatype='real' name='Inequality in education (%)' ordinal='56' />
            <column datatype='real' name='Inequality in income (%)' ordinal='57' />
            <column datatype='real' name='Inequality in life expectancy (%)' ordinal='58' />
            <column datatype='real' name='Inequality-adjusted HDI (IHDI)' ordinal='59' />
            <column datatype='real' name='Inequality-adjusted education index' ordinal='60' />
            <column datatype='real' name='Inequality-adjusted income index' ordinal='61' />
            <column datatype='real' name='Inequality-adjusted life expectancy index' ordinal='62' />
            <column datatype='real' name='Infants lacking immunization, DPT (% of one-year-olds)' ordinal='63' />
            <column datatype='real' name='Infants lacking immunization, measles (% of one-year-olds)' ordinal='64' />
            <column datatype='real' name='International inbound tourists (thousands)' ordinal='65' />
            <column datatype='real' name='International student mobility (% of total tertiary enrolment)' ordinal='66' />
            <column datatype='real' name='Internet users, female (% of female population)' ordinal='67' />
            <column datatype='real' name='Internet users, total (% of population)' ordinal='68' />
            <column datatype='real' name='Labour force participation rate (% ages 15 and older)' ordinal='69' />
            <column datatype='real' name='Labour force participation rate (% ages 15 and older), female' ordinal='70' />
            <column datatype='real' name='Labour force participation rate (% ages 15 and older), male' ordinal='71' />
            <column datatype='real' name='Life expectancy at birth (years)' ordinal='72' />
            <column datatype='real' name='Life expectancy at birth, female (years)' ordinal='73' />
            <column datatype='real' name='Life expectancy at birth, male (years)' ordinal='74' />
            <column datatype='real' name='Life expectancy index' ordinal='75' />
            <column datatype='real' name='Literacy rate, adult (% ages 15 and older)' ordinal='76' />
            <column datatype='real' name='MPI 2018: Contribution of Education' ordinal='77' />
            <column datatype='real' name='MPI 2018: Contribution of Health' ordinal='78' />
            <column datatype='real' name='MPI 2018: Contribution of standard of living' ordinal='79' />
            <column datatype='string' name='MPI 2018: Year of MPI' ordinal='80' />
            <column datatype='real' name='Malaria incidence (per 1,000 people at risk)' ordinal='81' />
            <column datatype='real' name='Mandatory paid maternity leave (days)' ordinal='82' />
            <column datatype='real' name='Maternal mortality ratio (deaths per 100,000 live births)' ordinal='83' />
            <column datatype='real' name='Mean years of schooling (years)' ordinal='84' />
            <column datatype='real' name='Mean years of schooling, female (years)' ordinal='85' />
            <column datatype='real' name='Mean years of schooling, male (years)' ordinal='86' />
            <column datatype='real' name='Median age (years)' ordinal='87' />
            <column datatype='real' name='Mobile phone subscriptions (per 100 people)' ordinal='88' />
            <column datatype='real' name='Mortality rate attributed to household and ambient air pollution (per 100,000 population)' ordinal='89' />
            <column datatype='real' name='Mortality rate attributed to unsafe water, sanitation and hygiene services (per 100,000 population)' ordinal='90' />
            <column datatype='real' name='Mortality rate, female adult (per 1,000 people)' ordinal='91' />
            <column datatype='real' name='Mortality rate, infant (per 1,000 live births)' ordinal='92' />
            <column datatype='real' name='Mortality rate, male adult (per 1,000 people)' ordinal='93' />
            <column datatype='real' name='Mortality rate, under-five (per 1,000 live births)' ordinal='94' />
            <column datatype='real' name='Multidimensional poverty index (MPI)' ordinal='95' />
            <column datatype='real' name='Net migration rate (per 1,000 people)' ordinal='96' />
            <column datatype='real' name='Net official development assistance received (% of GNI)' ordinal='97' />
            <column datatype='real' name='Old-age (65 and older) dependency ratio (per 100 people ages 15-64)' ordinal='98' />
            <column datatype='real' name='Old-age pension recipients (% of statutory pension age population)' ordinal='99' />
            <column datatype='real' name='Overall loss in HDI due to inequality (%)' ordinal='100' />
            <column datatype='real' name='Overall loss in HDI value due to inequality, average annual change (%)' ordinal='101' />
            <column datatype='real' name='Population ages 15–64 (millions)' ordinal='102' />
            <column datatype='real' name='Population ages 65 and older (millions)' ordinal='103' />
            <column datatype='real' name='Population in multidimensional poverty, headcount (%)' ordinal='104' />
            <column datatype='real' name='Population in multidimensional poverty, headcount (thousands) (for the year of the survey)' ordinal='105' />
            <column datatype='real' name='Population in multidimensional poverty, headcount (thousands) (projection for 2016)' ordinal='106' />
            <column datatype='real' name='Population in multidimensional poverty, intensity of deprivation (%)' ordinal='107' />
            <column datatype='real' name='Population in severe multidimensional poverty (%)' ordinal='108' />
            <column datatype='real' name='Population living below income poverty line, PPP $1.90 a day (%)' ordinal='109' />
            <column datatype='real' name='Population living below income poverty line, national poverty line (%)' ordinal='110' />
            <column datatype='real' name='Population under age 5 (millions)' ordinal='111' />
            <column datatype='real' name='Population using improved drinking-water sources (%)' ordinal='112' />
            <column datatype='real' name='Population using improved sanitation facilities (%)' ordinal='113' />
            <column datatype='real' name='Population vulnerable to multidimensional poverty (%)' ordinal='114' />
            <column datatype='real' name='Population with at least some secondary education (% ages 25 and older)' ordinal='115' />
            <column datatype='real' name='Population with at least some secondary education, female (% ages 25 and older)' ordinal='116' />
            <column datatype='real' name='Population with at least some secondary education, male (% ages 25 and older)' ordinal='117' />
            <column datatype='real' name='Primary school dropout rate (% of primary school cohort)' ordinal='118' />
            <column datatype='real' name='Primary school teachers trained to teach (%)' ordinal='119' />
            <column datatype='real' name='Prison population (per 100,000 people)' ordinal='120' />
            <column datatype='real' name='Private capital flows (% of GDP)' ordinal='121' />
            <column datatype='real' name='Programme for International Student Assessment (PISA) score in mathematics' ordinal='122' />
            <column datatype='real' name='Programme for International Student Assessment (PISA) score in reading' ordinal='123' />
            <column datatype='real' name='Programme for International Student Assessment (PISA) score in science' ordinal='124' />
            <column datatype='real' name='Proportion of births attended by skilled health personnel (%)' ordinal='125' />
            <column datatype='real' name='Proportion of schools with access to the Internet (%)' ordinal='126' />
            <column datatype='real' name='Pupil-teacher ratio, primary school (pupils per teacher)' ordinal='127' />
            <column datatype='real' name='Ratio of education and health expenditure to military expenditure' ordinal='128' />
            <column datatype='real' name='Red List Index (value)' ordinal='129' />
            <column datatype='real' name='Refugees by country of origin (thousands)' ordinal='130' />
            <column datatype='real' name='Remittances, inflows (% of GDP)' ordinal='131' />
            <column datatype='real' name='Renewable energy consumption (% of total final energy consumption)' ordinal='132' />
            <column datatype='real' name='Research and development expenditure (% of GDP)' ordinal='133' />
            <column datatype='real' name='Rural population with access to electricity (%)' ordinal='134' />
            <column datatype='real' name='Sex ratio at birth (male to female births)' ordinal='135' />
            <column datatype='real' name='Share of employment in nonagriculture, female (% of total employment in nonagriculture)' ordinal='136' />
            <column datatype='real' name='Share of seats in parliament (% held by women)' ordinal='137' />
            <column datatype='real' name='Skilled labour force (% of labour force)' ordinal='138' />
            <column datatype='real' name='Suicide rate, female (per 100,000 people)' ordinal='139' />
            <column datatype='real' name='Suicide rate, male (per 100,000 people)' ordinal='140' />
            <column datatype='real' name='Survival rate to the last grade of lower secondary general education (%)' ordinal='141' />
            <column datatype='real' name='Total debt service (% of exports of goods, services and primary income)' ordinal='142' />
            <column datatype='real' name='Total population (millions)' ordinal='143' />
            <column datatype='real' name='Total unemployment rate (female to male ratio)' ordinal='144' />
            <column datatype='real' name='Tuberculosis incidence (per 100,000 people)' ordinal='145' />
            <column datatype='real' name='Unemployment, total (% of labour force)' ordinal='146' />
            <column datatype='real' name='Unemployment, youth (% ages 15–24)' ordinal='147' />
            <column datatype='real' name='Unmet need for family planning (% of married or in-union women of reproductive age, 15–49 years)' ordinal='148' />
            <column datatype='real' name='Urban population (%)' ordinal='149' />
            <column datatype='real' name='Violence against women ever experienced, intimate partner (% of female population ages 15 and older)' ordinal='150' />
            <column datatype='real' name='Violence against women ever experienced, nonintimate partner (% of female population ages 15 and older)' ordinal='151' />
            <column datatype='real' name='Vulnerable employment (% of total employment)' ordinal='152' />
            <column datatype='real' name='Women with account at financial institution or with mobile money-service provider (% of female population ages 15 and older)' ordinal='153' />
            <column datatype='real' name='Working poor at PPP$3.10 a day (% of total employment)' ordinal='154' />
            <column datatype='real' name='Young age (0-14) dependency ratio (per 100 people ages 15-64)' ordinal='155' />
            <column datatype='real' name='Youth not in school or employment (% ages 15-24)' ordinal='156' />
            <column datatype='real' name='Youth unemployment rate (female to male ratio)' ordinal='157' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>rowindex</remote-name>
            <remote-type>129</remote-type>
            <local-name>[rowindex]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>rowindex</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Adjusted net savings (% of GNI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Adjusted net savings (% of GNI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Adjusted net savings (% of GNI)</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Adolescent birth rate (births per 1,000 women ages 15-19)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Adolescent birth rate (births per 1,000 women ages 15-19)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Adolescent birth rate (births per 1,000 women ages 15-19)</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Antenatal care coverage, at least one visit (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Antenatal care coverage, at least one visit (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Antenatal care coverage, at least one visit (%)</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Birth registration (% under age 5)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Birth registration (% under age 5)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Birth registration (% under age 5)</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Carbon dioxide emissions (kg per 2011 PPP $ of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Carbon dioxide emissions (kg per 2011 PPP $ of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Carbon dioxide emissions (kg per 2011 PPP $ of GDP)</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Carbon dioxide emissions, per capita (tonnes)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Carbon dioxide emissions, per capita (tonnes)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Carbon dioxide emissions, per capita (tonnes)</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Child labour (% ages 5-17)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Child labour (% ages 5-17)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Child labour (% ages 5-17)</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Child malnutrition, stunting (moderate or severe) (% under age 5)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Child malnutrition, stunting (moderate or severe) (% under age 5)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Child malnutrition, stunting (moderate or severe) (% under age 5)</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Coefficient of human inequality</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Coefficient of human inequality]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Coefficient of human inequality</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Concentration index (exports) (value)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Concentration index (exports) (value)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Concentration index (exports) (value)</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Current health expenditure (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Current health expenditure (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Current health expenditure (% of GDP)</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Domestic credit provided by financial sector (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Domestic credit provided by financial sector (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Domestic credit provided by financial sector (% of GDP)</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Education index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Education index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Education index</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Employment in agriculture (% of total employment)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Employment in agriculture (% of total employment)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Employment in agriculture (% of total employment)</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Employment in services (% of total employment)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Employment in services (% of total employment)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Employment in services (% of total employment)</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Employment to population ratio (% ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Employment to population ratio (% ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Employment to population ratio (% ages 15 and older)</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Estimated gross national income per capita, female (2011 PPP $)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Estimated gross national income per capita, female (2011 PPP $)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Estimated gross national income per capita, female (2011 PPP $)</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Estimated gross national income per capita, male (2011 PPP $)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Estimated gross national income per capita, male (2011 PPP $)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Estimated gross national income per capita, male (2011 PPP $)</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Expected years of schooling (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Expected years of schooling (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Expected years of schooling (years)</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Expected years of schooling, female (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Expected years of schooling, female (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Expected years of schooling, female (years)</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Expected years of schooling, male (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Expected years of schooling, male (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Expected years of schooling, male (years)</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Exports and imports (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Exports and imports (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Exports and imports (% of GDP)</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Female share of employment in senior and middle management (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Female share of employment in senior and middle management (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Female share of employment in senior and middle management (%)</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Female share of graduates in science, mathematics, engineering, manufacturing and construction at tertiary level (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Female share of graduates in science, mathematics, engineering, manufacturing and construction at tertiary level (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Female share of graduates in science, mathematics, engineering, manufacturing and construction at tertiary level (%)</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Foreign direct investment, net inflows (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Foreign direct investment, net inflows (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Foreign direct investment, net inflows (% of GDP)</remote-alias>
            <ordinal>27</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Forest area (% of total land area)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Forest area (% of total land area)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Forest area (% of total land area)</remote-alias>
            <ordinal>28</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Forest area, change (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Forest area, change (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Forest area, change (%)</remote-alias>
            <ordinal>29</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fossil fuel energy consumption (% of total energy consumption)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fossil fuel energy consumption (% of total energy consumption)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Fossil fuel energy consumption (% of total energy consumption)</remote-alias>
            <ordinal>30</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Fresh water withdrawals (% of total renewable water resources)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Fresh water withdrawals (% of total renewable water resources)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Fresh water withdrawals (% of total renewable water resources)</remote-alias>
            <ordinal>31</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>GDP per capita (2011 PPP $)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[GDP per capita (2011 PPP $)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>GDP per capita (2011 PPP $)</remote-alias>
            <ordinal>32</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gender Development Index (GDI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gender Development Index (GDI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gender Development Index (GDI)</remote-alias>
            <ordinal>33</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gender Inequality Index (GII)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gender Inequality Index (GII)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gender Inequality Index (GII)</remote-alias>
            <ordinal>34</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Government expenditure on education (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Government expenditure on education (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Government expenditure on education (% of GDP)</remote-alias>
            <ordinal>35</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross capital formation (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross capital formation (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross capital formation (% of GDP)</remote-alias>
            <ordinal>36</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross domestic product (GDP), total (2011 PPP $ billions)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross domestic product (GDP), total (2011 PPP $ billions)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross domestic product (GDP), total (2011 PPP $ billions)</remote-alias>
            <ordinal>37</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross enrolment ratio, pre-primary (% of preschool-age children)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross enrolment ratio, pre-primary (% of preschool-age children)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross enrolment ratio, pre-primary (% of preschool-age children)</remote-alias>
            <ordinal>38</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross enrolment ratio, primary (% of primary school-age population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross enrolment ratio, primary (% of primary school-age population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross enrolment ratio, primary (% of primary school-age population)</remote-alias>
            <ordinal>39</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross enrolment ratio, secondary (% of secondary school-age population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross enrolment ratio, secondary (% of secondary school-age population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross enrolment ratio, secondary (% of secondary school-age population)</remote-alias>
            <ordinal>40</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross enrolment ratio, tertiary (% of tertiary school-age population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross enrolment ratio, tertiary (% of tertiary school-age population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross enrolment ratio, tertiary (% of tertiary school-age population)</remote-alias>
            <ordinal>41</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross fixed capital formation (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross fixed capital formation (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross fixed capital formation (% of GDP)</remote-alias>
            <ordinal>42</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Gross national income (GNI) per capita (2011 PPP $)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Gross national income (GNI) per capita (2011 PPP $)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Gross national income (GNI) per capita (2011 PPP $)</remote-alias>
            <ordinal>43</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HDI rank</remote-name>
            <remote-type>5</remote-type>
            <local-name>[HDI rank]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>HDI rank</remote-alias>
            <ordinal>44</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HIV prevalence, adult (% ages 15-49)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[HIV prevalence, adult (% ages 15-49)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>HIV prevalence, adult (% ages 15-49)</remote-alias>
            <ordinal>45</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Homeless people due to natural disaster (average annual per million people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Homeless people due to natural disaster (average annual per million people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Homeless people due to natural disaster (average annual per million people)</remote-alias>
            <ordinal>46</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Homicide rate (per 100,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Homicide rate (per 100,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Homicide rate (per 100,000 people)</remote-alias>
            <ordinal>47</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Human Development Index (HDI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Human Development Index (HDI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Human Development Index (HDI)</remote-alias>
            <ordinal>48</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Human Development Index (HDI), female</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Human Development Index (HDI), female]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Human Development Index (HDI), female</remote-alias>
            <ordinal>49</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Human Development Index (HDI), male</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Human Development Index (HDI), male]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Human Development Index (HDI), male</remote-alias>
            <ordinal>50</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Income index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Income index</remote-alias>
            <ordinal>51</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income inequality, Gini coefficient</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Income inequality, Gini coefficient]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Income inequality, Gini coefficient</remote-alias>
            <ordinal>52</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income inequality, Palma ratio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Income inequality, Palma ratio]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Income inequality, Palma ratio</remote-alias>
            <ordinal>53</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income inequality, quintile ratio</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Income inequality, quintile ratio]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Income inequality, quintile ratio</remote-alias>
            <ordinal>54</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Income quintile ratio, average annual change (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Income quintile ratio, average annual change (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Income quintile ratio, average annual change (%)</remote-alias>
            <ordinal>55</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality in education (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality in education (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality in education (%)</remote-alias>
            <ordinal>56</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality in income (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality in income (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality in income (%)</remote-alias>
            <ordinal>57</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality in life expectancy (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality in life expectancy (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality in life expectancy (%)</remote-alias>
            <ordinal>58</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality-adjusted HDI (IHDI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality-adjusted HDI (IHDI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality-adjusted HDI (IHDI)</remote-alias>
            <ordinal>59</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality-adjusted education index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality-adjusted education index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality-adjusted education index</remote-alias>
            <ordinal>60</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality-adjusted income index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality-adjusted income index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality-adjusted income index</remote-alias>
            <ordinal>61</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Inequality-adjusted life expectancy index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Inequality-adjusted life expectancy index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Inequality-adjusted life expectancy index</remote-alias>
            <ordinal>62</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Infants lacking immunization, DPT (% of one-year-olds)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Infants lacking immunization, DPT (% of one-year-olds)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Infants lacking immunization, DPT (% of one-year-olds)</remote-alias>
            <ordinal>63</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Infants lacking immunization, measles (% of one-year-olds)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Infants lacking immunization, measles (% of one-year-olds)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Infants lacking immunization, measles (% of one-year-olds)</remote-alias>
            <ordinal>64</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>International inbound tourists (thousands)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[International inbound tourists (thousands)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>International inbound tourists (thousands)</remote-alias>
            <ordinal>65</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>International student mobility (% of total tertiary enrolment)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[International student mobility (% of total tertiary enrolment)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>International student mobility (% of total tertiary enrolment)</remote-alias>
            <ordinal>66</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Internet users, female (% of female population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Internet users, female (% of female population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Internet users, female (% of female population)</remote-alias>
            <ordinal>67</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Internet users, total (% of population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Internet users, total (% of population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Internet users, total (% of population)</remote-alias>
            <ordinal>68</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Labour force participation rate (% ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Labour force participation rate (% ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Labour force participation rate (% ages 15 and older)</remote-alias>
            <ordinal>69</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Labour force participation rate (% ages 15 and older), female</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Labour force participation rate (% ages 15 and older), female]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Labour force participation rate (% ages 15 and older), female</remote-alias>
            <ordinal>70</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Labour force participation rate (% ages 15 and older), male</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Labour force participation rate (% ages 15 and older), male]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Labour force participation rate (% ages 15 and older), male</remote-alias>
            <ordinal>71</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Life expectancy at birth (years)</remote-alias>
            <ordinal>72</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth, female (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth, female (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Life expectancy at birth, female (years)</remote-alias>
            <ordinal>73</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy at birth, male (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy at birth, male (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Life expectancy at birth, male (years)</remote-alias>
            <ordinal>74</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Life expectancy index</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Life expectancy index]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Life expectancy index</remote-alias>
            <ordinal>75</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Literacy rate, adult (% ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Literacy rate, adult (% ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Literacy rate, adult (% ages 15 and older)</remote-alias>
            <ordinal>76</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MPI 2018: Contribution of Education</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MPI 2018: Contribution of Education]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>MPI 2018: Contribution of Education</remote-alias>
            <ordinal>77</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MPI 2018: Contribution of Health</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MPI 2018: Contribution of Health]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>MPI 2018: Contribution of Health</remote-alias>
            <ordinal>78</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MPI 2018: Contribution of standard of living</remote-name>
            <remote-type>5</remote-type>
            <local-name>[MPI 2018: Contribution of standard of living]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>MPI 2018: Contribution of standard of living</remote-alias>
            <ordinal>79</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>MPI 2018: Year of MPI</remote-name>
            <remote-type>129</remote-type>
            <local-name>[MPI 2018: Year of MPI]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>MPI 2018: Year of MPI</remote-alias>
            <ordinal>80</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <approx-count>1</approx-count>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Malaria incidence (per 1,000 people at risk)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Malaria incidence (per 1,000 people at risk)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Malaria incidence (per 1,000 people at risk)</remote-alias>
            <ordinal>81</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mandatory paid maternity leave (days)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mandatory paid maternity leave (days)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mandatory paid maternity leave (days)</remote-alias>
            <ordinal>82</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Maternal mortality ratio (deaths per 100,000 live births)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Maternal mortality ratio (deaths per 100,000 live births)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Maternal mortality ratio (deaths per 100,000 live births)</remote-alias>
            <ordinal>83</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean years of schooling (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean years of schooling (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mean years of schooling (years)</remote-alias>
            <ordinal>84</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean years of schooling, female (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean years of schooling, female (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mean years of schooling, female (years)</remote-alias>
            <ordinal>85</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mean years of schooling, male (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mean years of schooling, male (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mean years of schooling, male (years)</remote-alias>
            <ordinal>86</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Median age (years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Median age (years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Median age (years)</remote-alias>
            <ordinal>87</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mobile phone subscriptions (per 100 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mobile phone subscriptions (per 100 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mobile phone subscriptions (per 100 people)</remote-alias>
            <ordinal>88</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate attributed to household and ambient air pollution (per 100,000 population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate attributed to household and ambient air pollution (per 100,000 population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate attributed to household and ambient air pollution (per 100,000 population)</remote-alias>
            <ordinal>89</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate attributed to unsafe water, sanitation and hygiene services (per 100,000 population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate attributed to unsafe water, sanitation and hygiene services (per 100,000 population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate attributed to unsafe water, sanitation and hygiene services (per 100,000 population)</remote-alias>
            <ordinal>90</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate, female adult (per 1,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate, female adult (per 1,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate, female adult (per 1,000 people)</remote-alias>
            <ordinal>91</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate, infant (per 1,000 live births)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate, infant (per 1,000 live births)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate, infant (per 1,000 live births)</remote-alias>
            <ordinal>92</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate, male adult (per 1,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate, male adult (per 1,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate, male adult (per 1,000 people)</remote-alias>
            <ordinal>93</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Mortality rate, under-five (per 1,000 live births)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Mortality rate, under-five (per 1,000 live births)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Mortality rate, under-five (per 1,000 live births)</remote-alias>
            <ordinal>94</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Multidimensional poverty index (MPI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Multidimensional poverty index (MPI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Multidimensional poverty index (MPI)</remote-alias>
            <ordinal>95</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Net migration rate (per 1,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Net migration rate (per 1,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Net migration rate (per 1,000 people)</remote-alias>
            <ordinal>96</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Net official development assistance received (% of GNI)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Net official development assistance received (% of GNI)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Net official development assistance received (% of GNI)</remote-alias>
            <ordinal>97</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Old-age (65 and older) dependency ratio (per 100 people ages 15-64)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Old-age (65 and older) dependency ratio (per 100 people ages 15-64)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Old-age (65 and older) dependency ratio (per 100 people ages 15-64)</remote-alias>
            <ordinal>98</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Old-age pension recipients (% of statutory pension age population)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Old-age pension recipients (% of statutory pension age population)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Old-age pension recipients (% of statutory pension age population)</remote-alias>
            <ordinal>99</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Overall loss in HDI due to inequality (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Overall loss in HDI due to inequality (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Overall loss in HDI due to inequality (%)</remote-alias>
            <ordinal>100</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Overall loss in HDI value due to inequality, average annual change (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Overall loss in HDI value due to inequality, average annual change (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Overall loss in HDI value due to inequality, average annual change (%)</remote-alias>
            <ordinal>101</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population ages 15–64 (millions)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population ages 15–64 (millions)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population ages 15–64 (millions)</remote-alias>
            <ordinal>102</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population ages 65 and older (millions)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population ages 65 and older (millions)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population ages 65 and older (millions)</remote-alias>
            <ordinal>103</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in multidimensional poverty, headcount (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in multidimensional poverty, headcount (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population in multidimensional poverty, headcount (%)</remote-alias>
            <ordinal>104</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in multidimensional poverty, headcount (thousands) (for the year of the survey)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in multidimensional poverty, headcount (thousands) (for the year of the survey)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population in multidimensional poverty, headcount (thousands) (for the year of the survey)</remote-alias>
            <ordinal>105</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in multidimensional poverty, headcount (thousands) (projection for 2016)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in multidimensional poverty, headcount (thousands) (projection for 2016)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population in multidimensional poverty, headcount (thousands) (projection for 2016)</remote-alias>
            <ordinal>106</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in multidimensional poverty, intensity of deprivation (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in multidimensional poverty, intensity of deprivation (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population in multidimensional poverty, intensity of deprivation (%)</remote-alias>
            <ordinal>107</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population in severe multidimensional poverty (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population in severe multidimensional poverty (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population in severe multidimensional poverty (%)</remote-alias>
            <ordinal>108</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population living below income poverty line, PPP $1.90 a day (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population living below income poverty line, PPP $1.90 a day (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population living below income poverty line, PPP $1.90 a day (%)</remote-alias>
            <ordinal>109</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population living below income poverty line, national poverty line (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population living below income poverty line, national poverty line (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population living below income poverty line, national poverty line (%)</remote-alias>
            <ordinal>110</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population under age 5 (millions)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population under age 5 (millions)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population under age 5 (millions)</remote-alias>
            <ordinal>111</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population using improved drinking-water sources (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population using improved drinking-water sources (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population using improved drinking-water sources (%)</remote-alias>
            <ordinal>112</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population using improved sanitation facilities (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population using improved sanitation facilities (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population using improved sanitation facilities (%)</remote-alias>
            <ordinal>113</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population vulnerable to multidimensional poverty (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population vulnerable to multidimensional poverty (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population vulnerable to multidimensional poverty (%)</remote-alias>
            <ordinal>114</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population with at least some secondary education (% ages 25 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population with at least some secondary education (% ages 25 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population with at least some secondary education (% ages 25 and older)</remote-alias>
            <ordinal>115</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population with at least some secondary education, female (% ages 25 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population with at least some secondary education, female (% ages 25 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population with at least some secondary education, female (% ages 25 and older)</remote-alias>
            <ordinal>116</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population with at least some secondary education, male (% ages 25 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population with at least some secondary education, male (% ages 25 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Population with at least some secondary education, male (% ages 25 and older)</remote-alias>
            <ordinal>117</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Primary school dropout rate (% of primary school cohort)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Primary school dropout rate (% of primary school cohort)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Primary school dropout rate (% of primary school cohort)</remote-alias>
            <ordinal>118</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Primary school teachers trained to teach (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Primary school teachers trained to teach (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Primary school teachers trained to teach (%)</remote-alias>
            <ordinal>119</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Prison population (per 100,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Prison population (per 100,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Prison population (per 100,000 people)</remote-alias>
            <ordinal>120</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Private capital flows (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Private capital flows (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Private capital flows (% of GDP)</remote-alias>
            <ordinal>121</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Programme for International Student Assessment (PISA) score in mathematics</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Programme for International Student Assessment (PISA) score in mathematics]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Programme for International Student Assessment (PISA) score in mathematics</remote-alias>
            <ordinal>122</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Programme for International Student Assessment (PISA) score in reading</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Programme for International Student Assessment (PISA) score in reading]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Programme for International Student Assessment (PISA) score in reading</remote-alias>
            <ordinal>123</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Programme for International Student Assessment (PISA) score in science</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Programme for International Student Assessment (PISA) score in science]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Programme for International Student Assessment (PISA) score in science</remote-alias>
            <ordinal>124</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Proportion of births attended by skilled health personnel (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Proportion of births attended by skilled health personnel (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Proportion of births attended by skilled health personnel (%)</remote-alias>
            <ordinal>125</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Proportion of schools with access to the Internet (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Proportion of schools with access to the Internet (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Proportion of schools with access to the Internet (%)</remote-alias>
            <ordinal>126</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Pupil-teacher ratio, primary school (pupils per teacher)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Pupil-teacher ratio, primary school (pupils per teacher)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Pupil-teacher ratio, primary school (pupils per teacher)</remote-alias>
            <ordinal>127</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Ratio of education and health expenditure to military expenditure</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Ratio of education and health expenditure to military expenditure]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Ratio of education and health expenditure to military expenditure</remote-alias>
            <ordinal>128</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Red List Index (value)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Red List Index (value)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Red List Index (value)</remote-alias>
            <ordinal>129</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Refugees by country of origin (thousands)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Refugees by country of origin (thousands)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Refugees by country of origin (thousands)</remote-alias>
            <ordinal>130</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Remittances, inflows (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Remittances, inflows (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Remittances, inflows (% of GDP)</remote-alias>
            <ordinal>131</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Renewable energy consumption (% of total final energy consumption)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Renewable energy consumption (% of total final energy consumption)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Renewable energy consumption (% of total final energy consumption)</remote-alias>
            <ordinal>132</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Research and development expenditure (% of GDP)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Research and development expenditure (% of GDP)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Research and development expenditure (% of GDP)</remote-alias>
            <ordinal>133</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rural population with access to electricity (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rural population with access to electricity (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Rural population with access to electricity (%)</remote-alias>
            <ordinal>134</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Sex ratio at birth (male to female births)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Sex ratio at birth (male to female births)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Sex ratio at birth (male to female births)</remote-alias>
            <ordinal>135</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Share of employment in nonagriculture, female (% of total employment in nonagriculture)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Share of employment in nonagriculture, female (% of total employment in nonagriculture)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Share of employment in nonagriculture, female (% of total employment in nonagriculture)</remote-alias>
            <ordinal>136</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Share of seats in parliament (% held by women)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Share of seats in parliament (% held by women)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Share of seats in parliament (% held by women)</remote-alias>
            <ordinal>137</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Skilled labour force (% of labour force)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Skilled labour force (% of labour force)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Skilled labour force (% of labour force)</remote-alias>
            <ordinal>138</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Suicide rate, female (per 100,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Suicide rate, female (per 100,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Suicide rate, female (per 100,000 people)</remote-alias>
            <ordinal>139</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Suicide rate, male (per 100,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Suicide rate, male (per 100,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Suicide rate, male (per 100,000 people)</remote-alias>
            <ordinal>140</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Survival rate to the last grade of lower secondary general education (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Survival rate to the last grade of lower secondary general education (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Survival rate to the last grade of lower secondary general education (%)</remote-alias>
            <ordinal>141</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total debt service (% of exports of goods, services and primary income)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total debt service (% of exports of goods, services and primary income)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Total debt service (% of exports of goods, services and primary income)</remote-alias>
            <ordinal>142</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total population (millions)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total population (millions)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Total population (millions)</remote-alias>
            <ordinal>143</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total unemployment rate (female to male ratio)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total unemployment rate (female to male ratio)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Total unemployment rate (female to male ratio)</remote-alias>
            <ordinal>144</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tuberculosis incidence (per 100,000 people)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Tuberculosis incidence (per 100,000 people)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Tuberculosis incidence (per 100,000 people)</remote-alias>
            <ordinal>145</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unemployment, total (% of labour force)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unemployment, total (% of labour force)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Unemployment, total (% of labour force)</remote-alias>
            <ordinal>146</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unemployment, youth (% ages 15–24)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unemployment, youth (% ages 15–24)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Unemployment, youth (% ages 15–24)</remote-alias>
            <ordinal>147</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unmet need for family planning (% of married or in-union women of reproductive age, 15–49 years)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unmet need for family planning (% of married or in-union women of reproductive age, 15–49 years)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Unmet need for family planning (% of married or in-union women of reproductive age, 15–49 years)</remote-alias>
            <ordinal>148</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Urban population (%)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Urban population (%)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Urban population (%)</remote-alias>
            <ordinal>149</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Violence against women ever experienced, intimate partner (% of female population ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Violence against women ever experienced, intimate partner (% of female population ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Violence against women ever experienced, intimate partner (% of female population ages 15 and older)</remote-alias>
            <ordinal>150</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Violence against women ever experienced, nonintimate partner (% of female population ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Violence against women ever experienced, nonintimate partner (% of female population ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Violence against women ever experienced, nonintimate partner (% of female population ages 15 and older)</remote-alias>
            <ordinal>151</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Vulnerable employment (% of total employment)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Vulnerable employment (% of total employment)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Vulnerable employment (% of total employment)</remote-alias>
            <ordinal>152</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Women with account at financial institution or with mobile money-service provider (% of female population ages 15 and older)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Women with account at financial institution or with mobile money-service provider (% of female population ages 15 and older)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Women with account at financial institution or with mobile money-service provider (% of female population ages 15 and older)</remote-alias>
            <ordinal>153</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Working poor at PPP$3.10 a day (% of total employment)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Working poor at PPP$3.10 a day (% of total employment)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Working poor at PPP$3.10 a day (% of total employment)</remote-alias>
            <ordinal>154</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Young age (0-14) dependency ratio (per 100 people ages 15-64)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Young age (0-14) dependency ratio (per 100 people ages 15-64)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Young age (0-14) dependency ratio (per 100 people ages 15-64)</remote-alias>
            <ordinal>155</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Youth not in school or employment (% ages 15-24)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Youth not in school or employment (% ages 15-24)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Youth not in school or employment (% ages 15-24)</remote-alias>
            <ordinal>156</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Youth unemployment rate (female to male ratio)</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Youth unemployment rate (female to male ratio)]</local-name>
            <parent-name>[dftab1_melt_pivot1.csv]</parent-name>
            <remote-alias>Youth unemployment rate (female to male ratio)</remote-alias>
            <ordinal>157</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='suicide rate f/m' datatype='real' name='[Calculation_1668724448965713920]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Suicide rate, female (per 100,000 people)]/[Suicide rate, male (per 100,000 people)]' />
      </column>
      <column caption='internet users fem/total' datatype='real' name='[Calculation_1668724448966389761]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Internet users, female (% of female population)]/[Internet users, total (% of population)]' />
      </column>
      <column caption='labor participation m/f' datatype='real' name='[Calculation_1668724448976556035]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='[Labour force participation rate (% ages 15 and older), male]/[Labour force participation rate (% ages 15 and older), female]' />
      </column>
      <column caption='HDI_Education_cor' datatype='real' name='[Calculation_2176364570223542272]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CORR([Human Development Index (HDI)], [Inequality in education (%)])' />
      </column>
      <column caption='HDI_income_cor' datatype='real' name='[Calculation_2176364570224312321]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CORR([Human Development Index (HDI)],[Inequality in income (%)])' />
      </column>
      <column caption='HDI_life_cor' datatype='real' name='[Calculation_2176364570225025026]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CORR([Human Development Index (HDI)],[Inequality in life expectancy (%)])' />
      </column>
      <column caption='HDI_gender_cor' datatype='real' name='[Calculation_2176364570237087747]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='CORR([Human Development Index (HDI)], [Gender Inequality Index (GII)])' />
      </column>
      <column caption='country_level' datatype='string' name='[Calculation_2176364570317750279]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [HDI rank]&lt;=60 THEN &quot;High&quot;&#10;ELSEIF [HDI rank]&gt; 60 and[HDI rank] &lt;=120 THEN &apos;Median&apos;&#10;ELSEIF [HDI rank]&gt;120 THEN &apos;Low&apos;&#10;END' />
      </column>
      <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column caption='ISO' datatype='string' name='[rowindex - Split 1]' role='dimension' semantic-role='[County].[Name]' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 1 ) )' />
      </column>
      <column caption='Country Name' datatype='string' name='[rowindex - Split 2]' role='dimension' semantic-role='[Country].[Name]' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 2 ) )' />
      </column>
      <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
        <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
      </column>
      <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
      <column-instance column='[Calculation_2176364570317750279]' derivation='None' name='[none:Calculation_2176364570317750279:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[rowindex - Split 2]' derivation='None' name='[none:rowindex - Split 2:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_2176364570223542272]' derivation='User' name='[usr:Calculation_2176364570223542272:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2176364570224312321]' derivation='User' name='[usr:Calculation_2176364570224312321:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2176364570225025026]' derivation='User' name='[usr:Calculation_2176364570225025026:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_2176364570237087747]' derivation='User' name='[usr:Calculation_2176364570237087747:qk]' pivot='key' type='quantitative' />
      <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
      <group caption='Action (HDI level,Country Name)' hidden='true' name='[Action (HDI level,Country Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2176364570513256461]' />
          <groupfilter function='level-members' level='[rowindex - Split 2]' />
        </groupfilter>
      </group>
      <group caption='Action (HDI level,YEAR(Year))' hidden='true' name='[Action (HDI level,YEAR(Year))]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2176364570513256461]' />
          <groupfilter function='level-members' level='[yr:rowindex - Split 3:ok]' />
        </groupfilter>
      </group>
      <group caption='Action (country_level,Country Name)' hidden='true' name='[Action (country_level,Country Name)]' name-style='unqualified' user:auto-column='sheet_link'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[Calculation_2176364570317750279]' />
          <groupfilter function='level-members' level='[rowindex - Split 2]' />
        </groupfilter>
      </group>
      <drill-paths>
        <drill-path name='country_level, Country Name'>
          <field>[Calculation_2176364570317750279]</field>
          <field>[rowindex - Split 2]</field>
        </drill-path>
      </drill-paths>
      <layout dim-ordering='alphabetic' dim-percentage='0.207843' measure-ordering='alphabetic' measure-percentage='0.792157' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[none:rowindex - Split 2:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Bolivia (Plurinational State of)&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Turkmenistan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Brunei Darussalam&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;United Arab Emirates&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Central African Republic&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Syrian Arab Republic&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;United Kingdom&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Côte d&apos;Ivoire&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Tuvalu&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Eswatini (Kingdom of)&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;United States&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Micronesia (Federated States of)&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;The former Yugoslav Republic of Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lao People&apos;s Democratic Republic&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Moldova (Republic of)&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Congo (Democratic Republic of the)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Iran (Islamic Republic of)&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Korea (Democratic People&apos;s Rep. of)&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Venezuela (Bolivarian Republic of)&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Saint Vincent and the Grenadines&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Korea (Republic of)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Tanzania (United Republic of)&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Viet Nam&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Russian Federation&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk]&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]&#10;[none:Forecast Indicator:nk]' type='palette'>
            <map-pri to='multiordinal_blue_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[fVal:usr:Calculation_2176364570223542272:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gold_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[fVal:usr:Calculation_2176364570225025026:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_gray_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_green_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[fVal:usr:Calculation_2176364570224312321:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_orange_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[fVal:usr:Calculation_2176364570237087747:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_pink_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_red_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk]&quot;</bucket>
            </map-pri>
            <map-pri to='multiordinal_teal_10_0'>
              <bucket>&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk]&quot;</bucket>
            </map-pri>
          </encoding>
          <encoding attr='color' field='[none:Calculation_2176364570317750279:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;High&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>%null%</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Median&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Low&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_2176364570513256461:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Median&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Low&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;High&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
    </datasource>
    <datasource caption='links.csv+ (Multiple Connections) (2)' inline='true' name='federated.075q0991rufjcb1575y9x00nbtep' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='links' name='textscan.1rp5ro21456avu1drem6x0td3lvj'>
            <connection class='textscan' directory='/Users/lijiahuan/Desktop' filename='links.csv' password='' server='' />
          </named-connection>
          <named-connection caption='nodepositions' name='textscan.0g2ycsi0ahqxi2176zvxc1kamoda'>
            <connection class='textscan' directory='/Users/lijiahuan/Desktop' filename='nodepositions.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation join='left' type='join'>
          <clause type='join'>
            <expression op='='>
              <expression op='[links.csv].[var1]' />
              <expression op='[nodepositions.csv].[ID]' />
            </expression>
          </clause>
          <relation connection='textscan.1rp5ro21456avu1drem6x0td3lvj' name='links.csv' table='[links#csv]' type='table'>
            <columns character-set='UTF-16LE' header='yes' locale='en_US' separator=','>
              <column datatype='integer' name='F1' ordinal='0' />
              <column datatype='string' name='var1' ordinal='1' />
              <column datatype='string' name='var2' ordinal='2' />
              <column datatype='real' name='value' ordinal='3' />
            </columns>
          </relation>
          <relation connection='textscan.0g2ycsi0ahqxi2176zvxc1kamoda' name='nodepositions.csv' table='[nodepositions#csv]' type='table'>
            <columns character-set='UTF-16LE' header='yes' locale='en_US' separator=','>
              <column datatype='string' name='ID' ordinal='0' />
              <column datatype='real' name='X' ordinal='1' />
              <column datatype='real' name='Y' ordinal='2' />
              <column datatype='integer' name='Degree' ordinal='3' />
            </columns>
          </relation>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[links.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-16LE&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[links.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>var1</remote-name>
            <remote-type>129</remote-type>
            <local-name>[var1]</local-name>
            <parent-name>[links.csv]</parent-name>
            <remote-alias>var1</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>var2</remote-name>
            <remote-type>129</remote-type>
            <local-name>[var2]</local-name>
            <parent-name>[links.csv]</parent-name>
            <remote-alias>var2</remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>value</remote-name>
            <remote-type>5</remote-type>
            <local-name>[value]</local-name>
            <parent-name>[links.csv]</parent-name>
            <remote-alias>value</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[nodepositions.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-16LE&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ID</remote-name>
            <remote-type>129</remote-type>
            <local-name>[ID]</local-name>
            <parent-name>[nodepositions.csv]</parent-name>
            <remote-alias>ID</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>X</remote-name>
            <remote-type>5</remote-type>
            <local-name>[X]</local-name>
            <parent-name>[nodepositions.csv]</parent-name>
            <remote-alias>X</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Y</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Y]</local-name>
            <parent-name>[nodepositions.csv]</parent-name>
            <remote-alias>Y</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Degree</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Degree]</local-name>
            <parent-name>[nodepositions.csv]</parent-name>
            <remote-alias>Degree</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='Sum' datatype='integer' name='[Degree]' role='dimension' type='ordinal' />
      <column caption='ID - Split 1' datatype='string' name='[ID - Split 1]' role='dimension' type='nominal' user:SplitFieldIndex='1' user:SplitFieldOrigin='[federated.075q0991rufjcb1575y9x00nbtep].[ID]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [ID], &quot; &quot;, 1 ) )' />
      </column>
      <column caption='ID - Split 2' datatype='string' name='[ID - Split 2]' role='dimension' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.075q0991rufjcb1575y9x00nbtep].[ID]'>
        <calculation class='tableau' formula='TRIM( SPLIT( [ID], &quot; &quot;, 2 ) )' />
      </column>
      <column datatype='string' name='[ID]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column aggregation='Sum' datatype='real' name='[X]' role='dimension' type='quantitative' />
      <column aggregation='Sum' datatype='real' name='[Y]' role='dimension' type='quantitative' />
      <column aggregation='Sum' caption='Value' datatype='real' name='[value]' role='dimension' type='quantitative' />
      <column caption='Var1' datatype='string' name='[var1]' role='dimension' type='nominal' />
      <column caption='Var2' datatype='string' name='[var2]' role='dimension' type='nominal' />
      <group name='[HDI-centered]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='union'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='%null%' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.25462299673319766' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.5505228498154997' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81818658039369119' />
                        <groupfilter function='member' level='[value]' member='0.85014076586645282' />
                        <groupfilter function='member' level='[value]' member='0.85590779952141649' />
                        <groupfilter function='member' level='[value]' member='0.86430278922179671' />
                        <groupfilter function='member' level='[value]' member='0.87261372327949249' />
                        <groupfilter function='member' level='[value]' member='0.87609999991137644' />
                        <groupfilter function='member' level='[value]' member='0.87931201956619542' />
                        <groupfilter function='member' level='[value]' member='0.88143261512383153' />
                        <groupfilter function='member' level='[value]' member='0.88794351109168834' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.22556360266960279' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.46589750089872384' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81267126130937906' />
                        <groupfilter function='member' level='[value]' member='0.83047104215755452' />
                        <groupfilter function='member' level='[value]' member='0.83398222321126003' />
                        <groupfilter function='member' level='[value]' member='0.87931201956619542' />
                        <groupfilter function='member' level='[value]' member='0.87950610676931129' />
                        <groupfilter function='member' level='[value]' member='0.91039567214603856' />
                        <groupfilter function='member' level='[value]' member='0.91891084491508201' />
                        <groupfilter function='member' level='[value]' member='0.93923145942559438' />
                        <groupfilter function='member' level='[value]' member='0.94668706160820859' />
                        <groupfilter function='member' level='[value]' member='0.95060872548161401' />
                        <groupfilter function='member' level='[value]' member='0.98126987617910344' />
                        <groupfilter function='member' level='[value]' member='0.98701098842639157' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.2146884577171895' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.59336182652995706' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.86258521825504308' />
                        <groupfilter function='member' level='[value]' member='0.87609999991137644' />
                        <groupfilter function='member' level='[value]' member='0.8829635403498397' />
                        <groupfilter function='member' level='[value]' member='0.89604226672888043' />
                        <groupfilter function='member' level='[value]' member='0.90347617093388399' />
                        <groupfilter function='member' level='[value]' member='0.92363199160056642' />
                        <groupfilter function='member' level='[value]' member='0.93993878107013962' />
                        <groupfilter function='member' level='[value]' member='0.96273593327237239' />
                        <groupfilter function='member' level='[value]' member='0.98126987617910344' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.18634202502032951' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.5046371734899231' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80130920752935908' />
                        <groupfilter function='member' level='[value]' member='0.80580727179586731' />
                        <groupfilter function='member' level='[value]' member='0.81174593647226412' />
                        <groupfilter function='member' level='[value]' member='0.83057571987986534' />
                        <groupfilter function='member' level='[value]' member='0.84159475355788682' />
                        <groupfilter function='member' level='[value]' member='0.87261372327949249' />
                        <groupfilter function='member' level='[value]' member='0.88687917056316601' />
                        <groupfilter function='member' level='[value]' member='0.91195438644818405' />
                        <groupfilter function='member' level='[value]' member='0.92898987345111361' />
                        <groupfilter function='member' level='[value]' member='0.93534125059387918' />
                        <groupfilter function='member' level='[value]' member='0.95030998065814465' />
                        <groupfilter function='member' level='[value]' member='0.95357212773113564' />
                        <groupfilter function='member' level='[value]' member='0.96273593327237239' />
                        <groupfilter function='member' level='[value]' member='0.98701098842639157' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.16612686861180229' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.43955725520440492' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.811511531715428' />
                        <groupfilter function='member' level='[value]' member='0.81782533976069405' />
                        <groupfilter function='member' level='[value]' member='0.81790283520859264' />
                        <groupfilter function='member' level='[value]' member='0.82864462616224299' />
                        <groupfilter function='member' level='[value]' member='0.83237703134611996' />
                        <groupfilter function='member' level='[value]' member='0.83495413567739774' />
                        <groupfilter function='member' level='[value]' member='0.86287794965825004' />
                        <groupfilter function='member' level='[value]' member='0.87075534100989138' />
                        <groupfilter function='member' level='[value]' member='0.87277582661167274' />
                        <groupfilter function='member' level='[value]' member='0.88794351109168834' />
                        <groupfilter function='member' level='[value]' member='0.91549278626184982' />
                        <groupfilter function='member' level='[value]' member='0.93534125059387918' />
                        <groupfilter function='member' level='[value]' member='0.93993878107013962' />
                        <groupfilter function='member' level='[value]' member='0.94668706160820859' />
                        <groupfilter function='member' level='[value]' member='0.94955863850657685' />
                        <groupfilter function='member' level='[value]' member='0.95039759051609318' />
                        <groupfilter function='member' level='[value]' member='0.961281188120366' />
                        <groupfilter function='member' level='[value]' member='0.98302468839776902' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.16280257283314764' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.30248114665804243' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80815307708030171' />
                        <groupfilter function='member' level='[value]' member='0.80863788215218912' />
                        <groupfilter function='member' level='[value]' member='0.81113231680962972' />
                        <groupfilter function='member' level='[value]' member='0.82528866075224983' />
                        <groupfilter function='member' level='[value]' member='0.83126529998458498' />
                        <groupfilter function='member' level='[value]' member='0.83475865663646831' />
                        <groupfilter function='member' level='[value]' member='0.84931643823163838' />
                        <groupfilter function='member' level='[value]' member='0.85453105294713061' />
                        <groupfilter function='member' level='[value]' member='0.85539535030168412' />
                        <groupfilter function='member' level='[value]' member='0.85633141237398014' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.14336846366884706' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.46701916786104403' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81161918768915631' />
                        <groupfilter function='member' level='[value]' member='0.81413772480491697' />
                        <groupfilter function='member' level='[value]' member='0.81556140197552029' />
                        <groupfilter function='member' level='[value]' member='0.81880566012474898' />
                        <groupfilter function='member' level='[value]' member='0.83475865663646831' />
                        <groupfilter function='member' level='[value]' member='0.84195470773535241' />
                        <groupfilter function='member' level='[value]' member='0.84895180970293105' />
                        <groupfilter function='member' level='[value]' member='0.85479768374908482' />
                        <groupfilter function='member' level='[value]' member='0.8773452904554655' />
                        <groupfilter function='member' level='[value]' member='0.88143261512383153' />
                        <groupfilter function='member' level='[value]' member='0.89611690134299671' />
                        <groupfilter function='member' level='[value]' member='0.90297815692621819' />
                        <groupfilter function='member' level='[value]' member='0.92363199160056642' />
                        <groupfilter function='member' level='[value]' member='0.93080834552165781' />
                        <groupfilter function='member' level='[value]' member='0.95030998065814465' />
                        <groupfilter function='member' level='[value]' member='0.95060872548161401' />
                        <groupfilter function='member' level='[value]' member='0.9669224043021466' />
                        <groupfilter function='member' level='[value]' member='0.96922645087472981' />
                        <groupfilter function='member' level='[value]' member='0.98302468839776902' />
                        <groupfilter function='member' level='[value]' member='0.98465687895734322' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.12912563547377509' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.50924982102876293' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80151652913919491' />
                        <groupfilter function='member' level='[value]' member='0.81505023597290138' />
                        <groupfilter function='member' level='[value]' member='0.81859362317210493' />
                        <groupfilter function='member' level='[value]' member='0.8402356838513062' />
                        <groupfilter function='member' level='[value]' member='0.84781874775456523' />
                        <groupfilter function='member' level='[value]' member='0.85633141237398014' />
                        <groupfilter function='member' level='[value]' member='0.86127153226026898' />
                        <groupfilter function='member' level='[value]' member='0.86430278922179671' />
                        <groupfilter function='member' level='[value]' member='0.86735871696795452' />
                        <groupfilter function='member' level='[value]' member='0.89018897675450648' />
                        <groupfilter function='member' level='[value]' member='0.90347617093388399' />
                        <groupfilter function='member' level='[value]' member='0.9113914394941548' />
                        <groupfilter function='member' level='[value]' member='0.92440028546133779' />
                        <groupfilter function='member' level='[value]' member='0.93923145942559438' />
                        <groupfilter function='member' level='[value]' member='0.95357212773113564' />
                        <groupfilter function='member' level='[value]' member='0.95688109774279995' />
                        <groupfilter function='member' level='[value]' member='0.961281188120366' />
                        <groupfilter function='member' level='[value]' member='0.96637209402817081' />
                        <groupfilter function='member' level='[value]' member='0.98465687895734322' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.12210798532813744' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.31997095169349693' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80114342363418434' />
                        <groupfilter function='member' level='[value]' member='0.811511531715428' />
                        <groupfilter function='member' level='[value]' member='0.81413772480491697' />
                        <groupfilter function='member' level='[value]' member='0.83145760147998948' />
                        <groupfilter function='member' level='[value]' member='0.85805146689830214' />
                        <groupfilter function='member' level='[value]' member='0.87551388176371414' />
                        <groupfilter function='member' level='[value]' member='0.87977086873407917' />
                        <groupfilter function='member' level='[value]' member='0.89272931140278877' />
                        <groupfilter function='member' level='[value]' member='0.89826008319283168' />
                        <groupfilter function='member' level='[value]' member='0.90438246342568396' />
                        <groupfilter function='member' level='[value]' member='0.92725121721727044' />
                        <groupfilter function='member' level='[value]' member='0.95719948736991256' />
                        <groupfilter function='member' level='[value]' member='0.9861244645278916' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.103811825429652' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.38723804493736447' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80339006329178442' />
                        <groupfilter function='member' level='[value]' member='0.8185772592827596' />
                        <groupfilter function='member' level='[value]' member='0.82094679446954244' />
                        <groupfilter function='member' level='[value]' member='0.82196185797463994' />
                        <groupfilter function='member' level='[value]' member='0.82204186780775945' />
                        <groupfilter function='member' level='[value]' member='0.83133123637888007' />
                        <groupfilter function='member' level='[value]' member='0.84071966213419058' />
                        <groupfilter function='member' level='[value]' member='0.84923814951018284' />
                        <groupfilter function='member' level='[value]' member='0.84938147978260081' />
                        <groupfilter function='member' level='[value]' member='0.85158601303349868' />
                        <groupfilter function='member' level='[value]' member='0.86389596164137394' />
                        <groupfilter function='member' level='[value]' member='0.86565229739816185' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.097653310672005375' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.25959014503785727' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.8064487560400545' />
                        <groupfilter function='member' level='[value]' member='0.81633911667130588' />
                        <groupfilter function='member' level='[value]' member='0.83003335135939249' />
                        <groupfilter function='member' level='[value]' member='0.83145760147998948' />
                        <groupfilter function='member' level='[value]' member='0.83787146013386615' />
                        <groupfilter function='member' level='[value]' member='0.84497202654625925' />
                        <groupfilter function='member' level='[value]' member='0.84694576302418989' />
                        <groupfilter function='member' level='[value]' member='0.86210420303255175' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.093864046939706847' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.43263915587120061' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80179029894715859' />
                        <groupfilter function='member' level='[value]' member='0.80807969725458184' />
                        <groupfilter function='member' level='[value]' member='0.80809885774334322' />
                        <groupfilter function='member' level='[value]' member='0.82284300553750256' />
                        <groupfilter function='member' level='[value]' member='0.82734538567157423' />
                        <groupfilter function='member' level='[value]' member='0.82766220315252859' />
                        <groupfilter function='member' level='[value]' member='0.83754046235575685' />
                        <groupfilter function='member' level='[value]' member='0.83787146013386615' />
                        <groupfilter function='member' level='[value]' member='0.83850730217470271' />
                        <groupfilter function='member' level='[value]' member='0.84663343432208471' />
                        <groupfilter function='member' level='[value]' member='0.85014076586645282' />
                        <groupfilter function='member' level='[value]' member='0.85453105294713061' />
                        <groupfilter function='member' level='[value]' member='0.8617875234651321' />
                        <groupfilter function='member' level='[value]' member='0.8829635403498397' />
                        <groupfilter function='member' level='[value]' member='0.91039567214603856' />
                        <groupfilter function='member' level='[value]' member='0.91195438644818405' />
                        <groupfilter function='member' level='[value]' member='0.91401133114342636' />
                        <groupfilter function='member' level='[value]' member='0.92725121721727044' />
                        <groupfilter function='member' level='[value]' member='0.93459743942248918' />
                        <groupfilter function='member' level='[value]' member='0.94739453176889077' />
                        <groupfilter function='member' level='[value]' member='0.95039759051609318' />
                        <groupfilter function='member' level='[value]' member='0.95054337753284723' />
                        <groupfilter function='member' level='[value]' member='0.95256755631311563' />
                        <groupfilter function='member' level='[value]' member='0.9543396022303704' />
                        <groupfilter function='member' level='[value]' member='0.95688109774279995' />
                        <groupfilter function='member' level='[value]' member='0.96108762740372955' />
                        <groupfilter function='member' level='[value]' member='0.9669224043021466' />
                        <groupfilter function='member' level='[value]' member='0.97920566998496283' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.07409230804610932' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.47830402296663982' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80869017458531323' />
                        <groupfilter function='member' level='[value]' member='0.82120578171086911' />
                        <groupfilter function='member' level='[value]' member='0.82235401464643487' />
                        <groupfilter function='member' level='[value]' member='0.82371832065322004' />
                        <groupfilter function='member' level='[value]' member='0.83003335135939249' />
                        <groupfilter function='member' level='[value]' member='0.83707066600893554' />
                        <groupfilter function='member' level='[value]' member='0.84275664485390156' />
                        <groupfilter function='member' level='[value]' member='0.84301080431076925' />
                        <groupfilter function='member' level='[value]' member='0.84575425521191006' />
                        <groupfilter function='member' level='[value]' member='0.85539535030168412' />
                        <groupfilter function='member' level='[value]' member='0.85590779952141649' />
                        <groupfilter function='member' level='[value]' member='0.85805146689830214' />
                        <groupfilter function='member' level='[value]' member='0.86817120636518452' />
                        <groupfilter function='member' level='[value]' member='0.86907716592044615' />
                        <groupfilter function='member' level='[value]' member='0.88116238937310132' />
                        <groupfilter function='member' level='[value]' member='0.89269909086101285' />
                        <groupfilter function='member' level='[value]' member='0.89604226672888043' />
                        <groupfilter function='member' level='[value]' member='0.90366474436748356' />
                        <groupfilter function='member' level='[value]' member='0.91534658226491639' />
                        <groupfilter function='member' level='[value]' member='0.91891084491508201' />
                        <groupfilter function='member' level='[value]' member='0.92898987345111361' />
                        <groupfilter function='member' level='[value]' member='0.93405429397633322' />
                        <groupfilter function='member' level='[value]' member='0.94089662378670658' />
                        <groupfilter function='member' level='[value]' member='0.94955863850657685' />
                        <groupfilter function='member' level='[value]' member='0.95990233775931' />
                        <groupfilter function='member' level='[value]' member='0.96637209402817081' />
                        <groupfilter function='member' level='[value]' member='0.96922645087472981' />
                        <groupfilter function='member' level='[value]' member='0.97920566998496283' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.065853142191515043' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.36583131684432502' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80478690351738313' />
                        <groupfilter function='member' level='[value]' member='0.80619893288294431' />
                        <groupfilter function='member' level='[value]' member='0.81633911667130588' />
                        <groupfilter function='member' level='[value]' member='0.81992096961913385' />
                        <groupfilter function='member' level='[value]' member='0.82136463007917582' />
                        <groupfilter function='member' level='[value]' member='0.8235049925907465' />
                        <groupfilter function='member' level='[value]' member='0.83398222321126003' />
                        <groupfilter function='member' level='[value]' member='0.84159475355788682' />
                        <groupfilter function='member' level='[value]' member='0.8441651522790794' />
                        <groupfilter function='member' level='[value]' member='0.84931643823163838' />
                        <groupfilter function='member' level='[value]' member='0.84938147978260081' />
                        <groupfilter function='member' level='[value]' member='0.85168337255043547' />
                        <groupfilter function='member' level='[value]' member='0.86755200955519718' />
                        <groupfilter function='member' level='[value]' member='0.87277582661167274' />
                        <groupfilter function='member' level='[value]' member='0.87530152565549124' />
                        <groupfilter function='member' level='[value]' member='0.87977086873407917' />
                        <groupfilter function='member' level='[value]' member='0.88284098372002984' />
                        <groupfilter function='member' level='[value]' member='0.88335582067980423' />
                        <groupfilter function='member' level='[value]' member='0.8834069456351028' />
                        <groupfilter function='member' level='[value]' member='0.89764806109354411' />
                        <groupfilter function='member' level='[value]' member='0.89771443616538671' />
                        <groupfilter function='member' level='[value]' member='0.90297815692621819' />
                        <groupfilter function='member' level='[value]' member='0.90973240573223357' />
                        <groupfilter function='member' level='[value]' member='0.9113914394941548' />
                        <groupfilter function='member' level='[value]' member='0.91693116282602083' />
                        <groupfilter function='member' level='[value]' member='0.92476944869348476' />
                        <groupfilter function='member' level='[value]' member='0.92592215915466036' />
                        <groupfilter function='member' level='[value]' member='0.93599271327082179' />
                        <groupfilter function='member' level='[value]' member='0.94089662378670658' />
                        <groupfilter function='member' level='[value]' member='0.9543396022303704' />
                        <groupfilter function='member' level='[value]' member='0.97154433599504642' />
                        <groupfilter function='member' level='[value]' member='0.97299806116322063' />
                        <groupfilter function='member' level='[value]' member='0.98859622607296838' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.063042956643313719' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.44692372329211466' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80162797402492991' />
                        <groupfilter function='member' level='[value]' member='0.80840627063589587' />
                        <groupfilter function='member' level='[value]' member='0.80863788215218912' />
                        <groupfilter function='member' level='[value]' member='0.81174593647226412' />
                        <groupfilter function='member' level='[value]' member='0.81232914880701468' />
                        <groupfilter function='member' level='[value]' member='0.81964045432460964' />
                        <groupfilter function='member' level='[value]' member='0.82094679446954244' />
                        <groupfilter function='member' level='[value]' member='0.8220920596316651' />
                        <groupfilter function='member' level='[value]' member='0.83255345296243211' />
                        <groupfilter function='member' level='[value]' member='0.83260960056771938' />
                        <groupfilter function='member' level='[value]' member='0.83495413567739774' />
                        <groupfilter function='member' level='[value]' member='0.83704716033837445' />
                        <groupfilter function='member' level='[value]' member='0.84781874775456523' />
                        <groupfilter function='member' level='[value]' member='0.84800894666646687' />
                        <groupfilter function='member' level='[value]' member='0.84895180970293105' />
                        <groupfilter function='member' level='[value]' member='0.85908253967060011' />
                        <groupfilter function='member' level='[value]' member='0.88116238937310132' />
                        <groupfilter function='member' level='[value]' member='0.89826008319283168' />
                        <groupfilter function='member' level='[value]' member='0.90119377068693118' />
                        <groupfilter function='member' level='[value]' member='0.90542478735184395' />
                        <groupfilter function='member' level='[value]' member='0.90973240573223357' />
                        <groupfilter function='member' level='[value]' member='0.91401133114342636' />
                        <groupfilter function='member' level='[value]' member='0.91590058420465925' />
                        <groupfilter function='member' level='[value]' member='0.91765327325137902' />
                        <groupfilter function='member' level='[value]' member='0.92086621259702017' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.061079639369904917' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.56518106398012935' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80840627063589587' />
                        <groupfilter function='member' level='[value]' member='0.81505023597290138' />
                        <groupfilter function='member' level='[value]' member='0.8161027495513612' />
                        <groupfilter function='member' level='[value]' member='0.81782533976069405' />
                        <groupfilter function='member' level='[value]' member='0.81880566012474898' />
                        <groupfilter function='member' level='[value]' member='0.83850730217470271' />
                        <groupfilter function='member' level='[value]' member='0.85544613840411843' />
                        <groupfilter function='member' level='[value]' member='0.85793561331558499' />
                        <groupfilter function='member' level='[value]' member='0.85821127455441581' />
                        <groupfilter function='member' level='[value]' member='0.86387153736987154' />
                        <groupfilter function='member' level='[value]' member='0.86907716592044615' />
                        <groupfilter function='member' level='[value]' member='0.87530152565549124' />
                        <groupfilter function='member' level='[value]' member='0.88958983741460573' />
                        <groupfilter function='member' level='[value]' member='0.92077675177319085' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.047960730781173154' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.41380204105109708' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.82712499248566496' />
                        <groupfilter function='member' level='[value]' member='0.83047104215755452' />
                        <groupfilter function='member' level='[value]' member='0.83057571987986534' />
                        <groupfilter function='member' level='[value]' member='0.83126529998458498' />
                        <groupfilter function='member' level='[value]' member='0.83458138849714514' />
                        <groupfilter function='member' level='[value]' member='0.84985029364727682' />
                        <groupfilter function='member' level='[value]' member='0.85158601303349868' />
                        <groupfilter function='member' level='[value]' member='0.85793561331558499' />
                        <groupfilter function='member' level='[value]' member='0.87075534100989138' />
                        <groupfilter function='member' level='[value]' member='0.88390345290357064' />
                        <groupfilter function='member' level='[value]' member='0.89018897675450648' />
                        <groupfilter function='member' level='[value]' member='0.89426867520407172' />
                        <groupfilter function='member' level='[value]' member='0.89611690134299671' />
                        <groupfilter function='member' level='[value]' member='0.90438246342568396' />
                        <groupfilter function='member' level='[value]' member='0.9052299823826564' />
                        <groupfilter function='member' level='[value]' member='0.90730615039666396' />
                        <groupfilter function='member' level='[value]' member='0.91334765408256602' />
                        <groupfilter function='member' level='[value]' member='0.9133534985225058' />
                        <groupfilter function='member' level='[value]' member='0.91765327325137902' />
                        <groupfilter function='member' level='[value]' member='0.91928949238349722' />
                        <groupfilter function='member' level='[value]' member='0.92249689536212465' />
                        <groupfilter function='member' level='[value]' member='0.93096114636833238' />
                        <groupfilter function='member' level='[value]' member='0.9317668425838872' />
                        <groupfilter function='member' level='[value]' member='0.93405429397633322' />
                        <groupfilter function='member' level='[value]' member='0.93680187546551563' />
                        <groupfilter function='member' level='[value]' member='0.94739453176889077' />
                        <groupfilter function='member' level='[value]' member='0.98115946901896556' />
                        <groupfilter function='member' level='[value]' member='0.98859622607296838' />
                        <groupfilter function='member' level='[value]' member='0.99546685298994475' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.040435405747777903' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.37834726463228774' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80130920752935908' />
                        <groupfilter function='member' level='[value]' member='0.8017679555691446' />
                        <groupfilter function='member' level='[value]' member='0.80356242517904686' />
                        <groupfilter function='member' level='[value]' member='0.81113231680962972' />
                        <groupfilter function='member' level='[value]' member='0.81210281246613647' />
                        <groupfilter function='member' level='[value]' member='0.81378415991296393' />
                        <groupfilter function='member' level='[value]' member='0.82517979641116213' />
                        <groupfilter function='member' level='[value]' member='0.8251868711914595' />
                        <groupfilter function='member' level='[value]' member='0.83237703134611996' />
                        <groupfilter function='member' level='[value]' member='0.83752497537308768' />
                        <groupfilter function='member' level='[value]' member='0.84497202654625925' />
                        <groupfilter function='member' level='[value]' member='0.85479768374908482' />
                        <groupfilter function='member' level='[value]' member='0.85709781264678919' />
                        <groupfilter function='member' level='[value]' member='0.86127153226026898' />
                        <groupfilter function='member' level='[value]' member='0.90366474436748356' />
                        <groupfilter function='member' level='[value]' member='0.91096333071825819' />
                        <groupfilter function='member' level='[value]' member='0.91513801844002562' />
                        <groupfilter function='member' level='[value]' member='0.92086621259702017' />
                        <groupfilter function='member' level='[value]' member='0.93096114636833238' />
                        <groupfilter function='member' level='[value]' member='0.93599271327082179' />
                        <groupfilter function='member' level='[value]' member='0.95256755631311563' />
                        <groupfilter function='member' level='[value]' member='0.95719948736991256' />
                        <groupfilter function='member' level='[value]' member='0.98936637381805759' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.027516729794571027' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.34077405045657932' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80584988422697201' />
                        <groupfilter function='member' level='[value]' member='0.80972875313041681' />
                        <groupfilter function='member' level='[value]' member='0.81284692859555752' />
                        <groupfilter function='member' level='[value]' member='0.81285249463476239' />
                        <groupfilter function='member' level='[value]' member='0.82469025281155484' />
                        <groupfilter function='member' level='[value]' member='0.82864462616224299' />
                        <groupfilter function='member' level='[value]' member='0.83432042709212917' />
                        <groupfilter function='member' level='[value]' member='0.8402356838513062' />
                        <groupfilter function='member' level='[value]' member='0.84195470773535241' />
                        <groupfilter function='member' level='[value]' member='0.84694576302418989' />
                        <groupfilter function='member' level='[value]' member='0.89269909086101285' />
                        <groupfilter function='member' level='[value]' member='0.90491499277267284' />
                        <groupfilter function='member' level='[value]' member='0.90912818536207118' />
                        <groupfilter function='member' level='[value]' member='0.91590058420465925' />
                        <groupfilter function='member' level='[value]' member='0.91693116282602083' />
                        <groupfilter function='member' level='[value]' member='0.92249689536212465' />
                        <groupfilter function='member' level='[value]' member='0.95054337753284723' />
                        <groupfilter function='member' level='[value]' member='0.9861244645278916' />
                        <groupfilter function='member' level='[value]' member='0.98936637381805759' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.02589490190498251' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52400591701772725' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80544501094398613' />
                        <groupfilter function='member' level='[value]' member='0.81964045432460964' />
                        <groupfilter function='member' level='[value]' member='0.81992096961913385' />
                        <groupfilter function='member' level='[value]' member='0.82920165580383154' />
                        <groupfilter function='member' level='[value]' member='0.83180292658882582' />
                        <groupfilter function='member' level='[value]' member='0.83182374465094644' />
                        <groupfilter function='member' level='[value]' member='0.84923814951018284' />
                        <groupfilter function='member' level='[value]' member='0.84985029364727682' />
                        <groupfilter function='member' level='[value]' member='0.85238527448401535' />
                        <groupfilter function='member' level='[value]' member='0.85341181965029' />
                        <groupfilter function='member' level='[value]' member='0.85574815040531815' />
                        <groupfilter function='member' level='[value]' member='0.9119567900704092' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.025546178749075655' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.45109848223598747' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81066465767968054' />
                        <groupfilter function='member' level='[value]' member='0.81270444094530125' />
                        <groupfilter function='member' level='[value]' member='0.81818658039369119' />
                        <groupfilter function='member' level='[value]' member='0.8185772592827596' />
                        <groupfilter function='member' level='[value]' member='0.82517493960473631' />
                        <groupfilter function='member' level='[value]' member='0.82528866075224983' />
                        <groupfilter function='member' level='[value]' member='0.82758033462046943' />
                        <groupfilter function='member' level='[value]' member='0.82920165580383154' />
                        <groupfilter function='member' level='[value]' member='0.83087794179970442' />
                        <groupfilter function='member' level='[value]' member='0.84159782256354776' />
                        <groupfilter function='member' level='[value]' member='0.84898014829169888' />
                        <groupfilter function='member' level='[value]' member='0.8530860477657134' />
                        <groupfilter function='member' level='[value]' member='0.85569805767318796' />
                        <groupfilter function='member' level='[value]' member='0.86210420303255175' />
                        <groupfilter function='member' level='[value]' member='0.86258521825504308' />
                        <groupfilter function='member' level='[value]' member='0.87361498502217771' />
                        <groupfilter function='member' level='[value]' member='0.87551388176371414' />
                        <groupfilter function='member' level='[value]' member='0.87667096809870659' />
                        <groupfilter function='member' level='[value]' member='0.87950610676931129' />
                        <groupfilter function='member' level='[value]' member='0.88687917056316601' />
                        <groupfilter function='member' level='[value]' member='0.90119377068693118' />
                        <groupfilter function='member' level='[value]' member='0.90268668957121423' />
                        <groupfilter function='member' level='[value]' member='0.90269648289929316' />
                        <groupfilter function='member' level='[value]' member='0.90491499277267284' />
                        <groupfilter function='member' level='[value]' member='0.91172263935518405' />
                        <groupfilter function='member' level='[value]' member='0.91513801844002562' />
                        <groupfilter function='member' level='[value]' member='0.91549278626184982' />
                        <groupfilter function='member' level='[value]' member='0.92077675177319085' />
                        <groupfilter function='member' level='[value]' member='0.92404218999696219' />
                        <groupfilter function='member' level='[value]' member='0.92440028546133779' />
                        <groupfilter function='member' level='[value]' member='0.93080834552165781' />
                        <groupfilter function='member' level='[value]' member='0.93143727647951724' />
                        <groupfilter function='member' level='[value]' member='0.93365367543802436' />
                        <groupfilter function='member' level='[value]' member='0.93610447733251556' />
                        <groupfilter function='member' level='[value]' member='0.9399713246255712' />
                        <groupfilter function='member' level='[value]' member='0.95990233775931' />
                        <groupfilter function='member' level='[value]' member='0.96108762740372955' />
                        <groupfilter function='member' level='[value]' member='0.97154433599504642' />
                        <groupfilter function='member' level='[value]' member='0.97607389488011465' />
                        <groupfilter function='member' level='[value]' member='0.98115946901896556' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.01575409693820054' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4185618076070825' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80580727179586731' />
                        <groupfilter function='member' level='[value]' member='0.8064487560400545' />
                        <groupfilter function='member' level='[value]' member='0.81267126130937906' />
                        <groupfilter function='member' level='[value]' member='0.8159479924769043' />
                        <groupfilter function='member' level='[value]' member='0.82196699875940116' />
                        <groupfilter function='member' level='[value]' member='0.8387826728282376' />
                        <groupfilter function='member' level='[value]' member='0.85341181965029' />
                        <groupfilter function='member' level='[value]' member='0.85544613840411843' />
                        <groupfilter function='member' level='[value]' member='0.86287794965825004' />
                        <groupfilter function='member' level='[value]' member='0.86389596164137394' />
                        <groupfilter function='member' level='[value]' member='0.86735871696795452' />
                        <groupfilter function='member' level='[value]' member='0.8773452904554655' />
                        <groupfilter function='member' level='[value]' member='0.88187948823978701' />
                        <groupfilter function='member' level='[value]' member='0.89272931140278877' />
                        <groupfilter function='member' level='[value]' member='0.89425866470592785' />
                        <groupfilter function='member' level='[value]' member='0.90077460567211365' />
                        <groupfilter function='member' level='[value]' member='0.90542478735184395' />
                        <groupfilter function='member' level='[value]' member='0.90912818536207118' />
                        <groupfilter function='member' level='[value]' member='0.91096333071825819' />
                        <groupfilter function='member' level='[value]' member='0.91534658226491639' />
                        <groupfilter function='member' level='[value]' member='0.91709197523334995' />
                        <groupfilter function='member' level='[value]' member='0.91709754558541923' />
                        <groupfilter function='member' level='[value]' member='0.9171469929557412' />
                        <groupfilter function='member' level='[value]' member='0.91835729394136101' />
                        <groupfilter function='member' level='[value]' member='0.93459743942248918' />
                        <groupfilter function='member' level='[value]' member='0.94322267974535956' />
                        <groupfilter function='member' level='[value]' member='0.94401855862865758' />
                        <groupfilter function='member' level='[value]' member='0.97299806116322063' />
                        <groupfilter function='member' level='[value]' member='0.97607389488011465' />
                        <groupfilter function='member' level='[value]' member='0.99546685298994475' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0061050735257695953' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.48146033001026706' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81161918768915631' />
                        <groupfilter function='member' level='[value]' member='0.81859362317210493' />
                        <groupfilter function='member' level='[value]' member='0.83432042709212917' />
                        <groupfilter function='member' level='[value]' member='0.84071966213419058' />
                        <groupfilter function='member' level='[value]' member='0.84134299302558846' />
                        <groupfilter function='member' level='[value]' member='0.84275664485390156' />
                        <groupfilter function='member' level='[value]' member='0.84456547959372108' />
                        <groupfilter function='member' level='[value]' member='0.84588779183960672' />
                        <groupfilter function='member' level='[value]' member='0.85574815040531815' />
                        <groupfilter function='member' level='[value]' member='0.85709781264678919' />
                        <groupfilter function='member' level='[value]' member='0.85908253967060011' />
                        <groupfilter function='member' level='[value]' member='0.85955793487957455' />
                        <groupfilter function='member' level='[value]' member='0.8617875234651321' />
                        <groupfilter function='member' level='[value]' member='0.86387153736987154' />
                        <groupfilter function='member' level='[value]' member='0.86835171080903883' />
                        <groupfilter function='member' level='[value]' member='0.92592215915466036' />
                        <groupfilter function='member' level='[value]' member='0.93610447733251556' />
                        <groupfilter function='member' level='[value]' member='0.93680187546551563' />
                        <groupfilter function='member' level='[value]' member='0.94401855862865758' />
                        <groupfilter function='member' level='[value]' member='0.97076845004461398' />
                        <groupfilter function='member' level='[value]' member='0.98349202241471723' />
                        <groupfilter function='member' level='[value]' member='0.98528738099772084' />
                        <groupfilter function='member' level='[value]' member='0.98530745031379119' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0080040261588559883' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.31489937067278861' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81000705805284456' />
                        <groupfilter function='member' level='[value]' member='0.81166039019471703' />
                        <groupfilter function='member' level='[value]' member='0.82120578171086911' />
                        <groupfilter function='member' level='[value]' member='0.82201475472332897' />
                        <groupfilter function='member' level='[value]' member='0.82284300553750256' />
                        <groupfilter function='member' level='[value]' member='0.82534748684007864' />
                        <groupfilter function='member' level='[value]' member='0.83704716033837445' />
                        <groupfilter function='member' level='[value]' member='0.83844401360895704' />
                        <groupfilter function='member' level='[value]' member='0.83848305473301454' />
                        <groupfilter function='member' level='[value]' member='0.85923128257643566' />
                        <groupfilter function='member' level='[value]' member='0.86565229739816185' />
                        <groupfilter function='member' level='[value]' member='0.86755200955519718' />
                        <groupfilter function='member' level='[value]' member='0.86835171080903883' />
                        <groupfilter function='member' level='[value]' member='0.87361498502217771' />
                        <groupfilter function='member' level='[value]' member='0.88187948823978701' />
                        <groupfilter function='member' level='[value]' member='0.88390345290357064' />
                        <groupfilter function='member' level='[value]' member='0.9119567900704092' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.02050910768242176' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52077890808473737' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80097488599719535' />
                        <groupfilter function='member' level='[value]' member='0.80162797402492991' />
                        <groupfilter function='member' level='[value]' member='0.8017679555691446' />
                        <groupfilter function='member' level='[value]' member='0.80339006329178442' />
                        <groupfilter function='member' level='[value]' member='0.80544501094398613' />
                        <groupfilter function='member' level='[value]' member='0.81000705805284456' />
                        <groupfilter function='member' level='[value]' member='0.85168337255043547' />
                        <groupfilter function='member' level='[value]' member='0.87667096809870659' />
                        <groupfilter function='member' level='[value]' member='0.89426867520407172' />
                        <groupfilter function='member' level='[value]' member='0.90077460567211365' />
                        <groupfilter function='member' level='[value]' member='0.97076845004461398' />
                        <groupfilter function='member' level='[value]' member='0.975877981496441' />
                        <groupfilter function='member' level='[value]' member='0.99331677148592556' />
                        <groupfilter function='member' level='[value]' member='0.99331805676356555' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.025672047885718099' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.38583870159367473' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80114342363418434' />
                        <groupfilter function='member' level='[value]' member='0.80323065310207142' />
                        <groupfilter function='member' level='[value]' member='0.80419164512579033' />
                        <groupfilter function='member' level='[value]' member='0.81418527354703141' />
                        <groupfilter function='member' level='[value]' member='0.82235401464643487' />
                        <groupfilter function='member' level='[value]' member='0.82469025281155484' />
                        <groupfilter function='member' level='[value]' member='0.82766220315252859' />
                        <groupfilter function='member' level='[value]' member='0.83133123637888007' />
                        <groupfilter function='member' level='[value]' member='0.83752497537308768' />
                        <groupfilter function='member' level='[value]' member='0.84800894666646687' />
                        <groupfilter function='member' level='[value]' member='0.85238527448401535' />
                        <groupfilter function='member' level='[value]' member='0.85923128257643566' />
                        <groupfilter function='member' level='[value]' member='0.89771443616538671' />
                        <groupfilter function='member' level='[value]' member='0.91172263935518405' />
                        <groupfilter function='member' level='[value]' member='0.91709754558541923' />
                        <groupfilter function='member' level='[value]' member='0.91928949238349722' />
                        <groupfilter function='member' level='[value]' member='0.975877981496441' />
                        <groupfilter function='member' level='[value]' member='0.98349202241471723' />
                        <groupfilter function='member' level='[value]' member='0.99446175341956677' />
                        <groupfilter function='member' level='[value]' member='0.994468864595206' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.052707690070471061' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4391658185089643' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80525914270613086' />
                        <groupfilter function='member' level='[value]' member='0.80809885774334322' />
                        <groupfilter function='member' level='[value]' member='0.81285249463476239' />
                        <groupfilter function='member' level='[value]' member='0.81496172923826238' />
                        <groupfilter function='member' level='[value]' member='0.82196185797463994' />
                        <groupfilter function='member' level='[value]' member='0.8251868711914595' />
                        <groupfilter function='member' level='[value]' member='0.83182374465094644' />
                        <groupfilter function='member' level='[value]' member='0.83260960056771938' />
                        <groupfilter function='member' level='[value]' member='0.83848305473301454' />
                        <groupfilter function='member' level='[value]' member='0.8834069456351028' />
                        <groupfilter function='member' level='[value]' member='0.90269648289929316' />
                        <groupfilter function='member' level='[value]' member='0.9133534985225058' />
                        <groupfilter function='member' level='[value]' member='0.9171469929557412' />
                        <groupfilter function='member' level='[value]' member='0.98530745031379119' />
                        <groupfilter function='member' level='[value]' member='0.99331677148592556' />
                        <groupfilter function='member' level='[value]' member='0.994468864595206' />
                        <groupfilter function='member' level='[value]' member='0.99999367166925002' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.060380115606413043' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4031169046956693' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80526610037561541' />
                        <groupfilter function='member' level='[value]' member='0.80807969725458184' />
                        <groupfilter function='member' level='[value]' member='0.81284692859555752' />
                        <groupfilter function='member' level='[value]' member='0.81491859632230013' />
                        <groupfilter function='member' level='[value]' member='0.82204186780775945' />
                        <groupfilter function='member' level='[value]' member='0.82517979641116213' />
                        <groupfilter function='member' level='[value]' member='0.83180292658882582' />
                        <groupfilter function='member' level='[value]' member='0.83255345296243211' />
                        <groupfilter function='member' level='[value]' member='0.83844401360895704' />
                        <groupfilter function='member' level='[value]' member='0.88335582067980423' />
                        <groupfilter function='member' level='[value]' member='0.90268668957121423' />
                        <groupfilter function='member' level='[value]' member='0.91334765408256602' />
                        <groupfilter function='member' level='[value]' member='0.91709197523334995' />
                        <groupfilter function='member' level='[value]' member='0.98528738099772084' />
                        <groupfilter function='member' level='[value]' member='0.99331805676356555' />
                        <groupfilter function='member' level='[value]' member='0.99446175341956677' />
                        <groupfilter function='member' level='[value]' member='0.99999367166925002' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.064007040476666582' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52318816681854308' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80323065310207142' />
                        <groupfilter function='member' level='[value]' member='0.82201475472332897' />
                        <groupfilter function='member' level='[value]' member='0.83707066600893554' />
                        <groupfilter function='member' level='[value]' member='0.83754046235575685' />
                        <groupfilter function='member' level='[value]' member='0.84134299302558846' />
                        <groupfilter function='member' level='[value]' member='0.86777004009573855' />
                        <groupfilter function='member' level='[value]' member='0.89285949181361901' />
                        <groupfilter function='member' level='[value]' member='0.89425866470592785' />
                        <groupfilter function='member' level='[value]' member='0.89764806109354411' />
                        <groupfilter function='member' level='[value]' member='0.9052299823826564' />
                        <groupfilter function='member' level='[value]' member='0.93365367543802436' />
                        <groupfilter function='member' level='[value]' member='0.98895817129881036' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.071503709581214783' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.48731905501099265' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80097488599719535' />
                        <groupfilter function='member' level='[value]' member='0.80151652913919491' />
                        <groupfilter function='member' level='[value]' member='0.80356242517904686' />
                        <groupfilter function='member' level='[value]' member='0.80491479366253216' />
                        <groupfilter function='member' level='[value]' member='0.80584988422697201' />
                        <groupfilter function='member' level='[value]' member='0.81232914880701468' />
                        <groupfilter function='member' level='[value]' member='0.81418527354703141' />
                        <groupfilter function='member' level='[value]' member='0.81491859632230013' />
                        <groupfilter function='member' level='[value]' member='0.81496172923826238' />
                        <groupfilter function='member' level='[value]' member='0.81556140197552029' />
                        <groupfilter function='member' level='[value]' member='0.81790283520859264' />
                        <groupfilter function='member' level='[value]' member='0.83008571511147522' />
                        <groupfilter function='member' level='[value]' member='0.83656259700035196' />
                        <groupfilter function='member' level='[value]' member='0.84301080431076925' />
                        <groupfilter function='member' level='[value]' member='0.84456547959372108' />
                        <groupfilter function='member' level='[value]' member='0.84663343432208471' />
                        <groupfilter function='member' level='[value]' member='0.85636169927328853' />
                        <groupfilter function='member' level='[value]' member='0.85821127455441581' />
                        <groupfilter function='member' level='[value]' member='0.86717987713204947' />
                        <groupfilter function='member' level='[value]' member='0.86777004009573855' />
                        <groupfilter function='member' level='[value]' member='0.87394651204214779' />
                        <groupfilter function='member' level='[value]' member='0.88284098372002984' />
                        <groupfilter function='member' level='[value]' member='0.90730615039666396' />
                        <groupfilter function='member' level='[value]' member='0.91835729394136101' />
                        <groupfilter function='member' level='[value]' member='0.92074900666491122' />
                        <groupfilter function='member' level='[value]' member='0.9399713246255712' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.084100225173990267' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.37612979650486089' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80972875313041681' />
                        <groupfilter function='member' level='[value]' member='0.81378415991296393' />
                        <groupfilter function='member' level='[value]' member='0.8161027495513612' />
                        <groupfilter function='member' level='[value]' member='0.82196699875940116' />
                        <groupfilter function='member' level='[value]' member='0.82289122761460975' />
                        <groupfilter function='member' level='[value]' member='0.82371832065322004' />
                        <groupfilter function='member' level='[value]' member='0.82734538567157423' />
                        <groupfilter function='member' level='[value]' member='0.83458138849714514' />
                        <groupfilter function='member' level='[value]' member='0.84159782256354776' />
                        <groupfilter function='member' level='[value]' member='0.8441651522790794' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.11857858016100138' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.28853344511100965' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81066465767968054' />
                        <groupfilter function='member' level='[value]' member='0.81881134377981601' />
                        <groupfilter function='member' level='[value]' member='0.8235049925907465' />
                        <groupfilter function='member' level='[value]' member='0.82712499248566496' />
                        <groupfilter function='member' level='[value]' member='0.8387826728282376' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.12394458110613636' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4309733853342359' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80179029894715859' />
                        <groupfilter function='member' level='[value]' member='0.80419164512579033' />
                        <groupfilter function='member' level='[value]' member='0.80525914270613086' />
                        <groupfilter function='member' level='[value]' member='0.80526610037561541' />
                        <groupfilter function='member' level='[value]' member='0.81210281246613647' />
                        <groupfilter function='member' level='[value]' member='0.81360744685155006' />
                        <groupfilter function='member' level='[value]' member='0.81881134377981601' />
                        <groupfilter function='member' level='[value]' member='0.8189175779384763' />
                        <groupfilter function='member' level='[value]' member='0.8220920596316651' />
                        <groupfilter function='member' level='[value]' member='0.82507351372640936' />
                        <groupfilter function='member' level='[value]' member='0.82534748684007864' />
                        <groupfilter function='member' level='[value]' member='0.83623071036444352' />
                        <groupfilter function='member' level='[value]' member='0.84575425521191006' />
                        <groupfilter function='member' level='[value]' member='0.84588779183960672' />
                        <groupfilter function='member' level='[value]' member='0.89285949181361901' />
                        <groupfilter function='member' level='[value]' member='0.92074900666491122' />
                        <groupfilter function='member' level='[value]' member='0.92476944869348476' />
                        <groupfilter function='member' level='[value]' member='0.93143727647951724' />
                        <groupfilter function='member' level='[value]' member='0.9317668425838872' />
                        <groupfilter function='member' level='[value]' member='0.94322267974535956' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.12555719559143269' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52565800877907609' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80619893288294431' />
                        <groupfilter function='member' level='[value]' member='0.8159479924769043' />
                        <groupfilter function='member' level='[value]' member='0.82289122761460975' />
                        <groupfilter function='member' level='[value]' member='0.85955793487957455' />
                        <groupfilter function='member' level='[value]' member='0.86817120636518452' />
                        <groupfilter function='member' level='[value]' member='0.87394651204214779' />
                        <groupfilter function='member' level='[value]' member='0.92404218999696219' />
                        <groupfilter function='member' level='[value]' member='0.98895817129881036' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.24955269965068019' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.58475085491289081' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81360744685155006' />
                        <groupfilter function='member' level='[value]' member='0.84898014829169888' />
                        <groupfilter function='member' level='[value]' member='0.85636169927328853' />
                        <groupfilter function='member' level='[value]' member='0.94328749176809157' />
                        <groupfilter function='member' level='[value]' member='0.99249513103239118' />
                        <groupfilter function='member' level='[value]' member='0.99462356596121881' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.26449588012160413' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.53628635966417337' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.82507351372640936' />
                        <groupfilter function='member' level='[value]' member='0.82758033462046943' />
                        <groupfilter function='member' level='[value]' member='0.83008571511147522' />
                        <groupfilter function='member' level='[value]' member='0.91688951352713322' />
                        <groupfilter function='member' level='[value]' member='0.93907510595373922' />
                        <groupfilter function='member' level='[value]' member='0.94328749176809157' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.30471155834841923' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4393187663730293' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.8189175779384763' />
                        <groupfilter function='member' level='[value]' member='0.82419285912913309' />
                        <groupfilter function='member' level='[value]' member='0.82517493960473631' />
                        <groupfilter function='member' level='[value]' member='0.83656259700035196' />
                        <groupfilter function='member' level='[value]' member='0.93907510595373922' />
                        <groupfilter function='member' level='[value]' member='0.98465342329764816' />
                        <groupfilter function='member' level='[value]' member='0.99249513103239118' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.31680801993640773' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.48313707748551671' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.82355894363626014' />
                        <groupfilter function='member' level='[value]' member='0.83623071036444352' />
                        <groupfilter function='member' level='[value]' member='0.85569805767318796' />
                        <groupfilter function='member' level='[value]' member='0.86717987713204947' />
                        <groupfilter function='member' level='[value]' member='0.91688951352713322' />
                        <groupfilter function='member' level='[value]' member='0.98465342329764816' />
                        <groupfilter function='member' level='[value]' member='0.99462356596121881' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='5' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.11857858016100138' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.28853344511100965' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Employment in services (\% of total employment)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='6' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.24955269965068019' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.58475085491289081' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Gross national income (GNI) per capita (2011 PPP $)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.26449588012160413' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.53628635966417337' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Estimated gross national income per capita, female (2011 PPP $)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='7' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.30471155834841923' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4393187663730293' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;GDP per capita (2011 PPP $)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.31680801993640773' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.48313707748551671' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Estimated gross national income per capita, male (2011 PPP $)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='8' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.097653310672005375' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.25959014503785727' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Gross enrolment ratio, tertiary (\% of tertiary school-age population)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.12555719559143269' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52565800877907609' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Internet users, total (\% of population)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='9' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.25462299673319766' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.5505228498154997' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Skilled labour force (\% of labour force)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.2146884577171895' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.59336182652995706' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population with at least some secondary education, male (\% ages 25 and older)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='10' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.16280257283314764' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.30248114665804243' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Literacy rate, adult (\% ages 15 and older)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.084100225173990267' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.37612979650486089' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Women with account at financial institution or with mobile money-service provider (\% of female population ages 15 and older)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='12' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.22556360266960279' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.46589750089872384' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population with at least some secondary education (\% ages 25 and older)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.103811825429652' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.38723804493736447' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population using improved drinking-water sources (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.02589490190498251' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52400591701772725' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Rural population with access to electricity (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.064007040476666582' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52318816681854308' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Internet users, female (\% of female population)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='13' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.12210798532813744' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.31997095169349693' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Expected years of schooling, male (years)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='14' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.18634202502032951' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.5046371734899231' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population with at least some secondary education, female (\% ages 25 and older)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.061079639369904917' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.56518106398012935' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Median age (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.02050910768242176' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.52077890808473737' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Life expectancy at birth, male (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='17' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0080040261588559883' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.31489937067278861' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population using improved sanitation facilities (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.052707690070471061' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4391658185089643' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Life expectancy index&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.060380115606413043' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4031169046956693' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Life expectancy at birth (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='18' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.16612686861180229' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.43955725520440492' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Mean years of schooling, male (years)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='19' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.12912563547377509' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.50924982102876293' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Mean years of schooling, female (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.027516729794571027' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.34077405045657932' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Expected years of schooling (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='20' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.14336846366884706' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.46701916786104403' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Mean years of schooling (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.025672047885718099' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.38583870159367473' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Life expectancy at birth, female (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.12394458110613636' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.4309733853342359' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Income index&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='23' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.040435405747777903' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.37834726463228774' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Expected years of schooling, female (years)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0061050735257695953' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.48146033001026706' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Inequality-adjusted life expectancy index&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='25' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.063042956643313719' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.44692372329211466' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Gross enrolment ratio, secondary (\% of secondary school-age population)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='26' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.071503709581214783' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.48731905501099265' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Inequality-adjusted income index&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='28' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.093864046939706847' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.43263915587120061' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Education index&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='-0.07409230804610932' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='0.47830402296663982' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Inequality-adjusted education index&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='29' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.047960730781173154' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.41380204105109708' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Human Development Index (HDI)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='30' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.01575409693820054' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.4185618076070825' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Human Development Index (HDI), male&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='33' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.065853142191515043' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.36583131684432502' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Human Development Index (HDI), female&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='40' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='-0.025546178749075655' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='0.45109848223598747' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Inequality-adjusted HDI (IHDI)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Degree]' />
            <hierarchy name='[ID]' />
            <hierarchy name='[value]' />
            <hierarchy name='[X]' />
            <hierarchy name='[Y]' />
          </order>
        </groupfilter>
        <desc>
          <formatted-text>
            <run>HDI</run>
          </formatted-text>
        </desc>
      </group>
      <group name='[ID - Split 1 &amp; ID - Split 2 (Combined)]' name-style='unqualified' user:ui-builder='nest-group'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[ID - Split 1]' />
          <groupfilter function='level-members' level='[ID - Split 2]' />
        </groupfilter>
      </group>
      <group name='[living condition-centered]' name-style='unqualified' user:ui-builder='lasso-group'>
        <groupfilter function='reorder-dimensionality'>
          <groupfilter function='union'>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='%null%' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0092641223034304315' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.77779179445644886' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80460363040431293' />
                        <groupfilter function='member' level='[value]' member='0.83387004932352793' />
                        <groupfilter function='member' level='[value]' member='0.85118027143048181' />
                        <groupfilter function='member' level='[value]' member='0.85961106151730082' />
                        <groupfilter function='member' level='[value]' member='0.88237333348630276' />
                        <groupfilter function='member' level='[value]' member='0.93043200572868601' />
                        <groupfilter function='member' level='[value]' member='0.93978606204415982' />
                        <groupfilter function='member' level='[value]' member='0.94548683389378863' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.033071828386701592' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.77527277519437077' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.84459587015843751' />
                        <groupfilter function='member' level='[value]' member='0.85345969981217862' />
                        <groupfilter function='member' level='[value]' member='0.8715402931330164' />
                        <groupfilter function='member' level='[value]' member='0.88164306257747505' />
                        <groupfilter function='member' level='[value]' member='0.88186417813041384' />
                        <groupfilter function='member' level='[value]' member='0.88731196631330689' />
                        <groupfilter function='member' level='[value]' member='0.89182040765388648' />
                        <groupfilter function='member' level='[value]' member='0.99913929635590082' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.057618813245062184' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.74424995761121959' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80314663820098431' />
                        <groupfilter function='member' level='[value]' member='0.83923537723717112' />
                        <groupfilter function='member' level='[value]' member='0.84635982117701547' />
                        <groupfilter function='member' level='[value]' member='0.84823823288888678' />
                        <groupfilter function='member' level='[value]' member='0.85445203326509056' />
                        <groupfilter function='member' level='[value]' member='0.93978606204415982' />
                        <groupfilter function='member' level='[value]' member='0.95483661994187197' />
                        <groupfilter function='member' level='[value]' member='0.98644625028508237' />
                        <groupfilter function='member' level='[value]' member='1.0' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.07539324146547613' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.89010650881576991' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.83719773433659661' />
                        <groupfilter function='member' level='[value]' member='0.84612394755201292' />
                        <groupfilter function='member' level='[value]' member='0.8651234994402327' />
                        <groupfilter function='member' level='[value]' member='0.87349504547783097' />
                        <groupfilter function='member' level='[value]' member='0.87548347299834328' />
                        <groupfilter function='member' level='[value]' member='0.88301532895349832' />
                        <groupfilter function='member' level='[value]' member='0.89031614683869853' />
                        <groupfilter function='member' level='[value]' member='0.99913929635590082' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.10448542508756076' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.72435357806717171' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81312795553490702' />
                        <groupfilter function='member' level='[value]' member='0.81766148504022229' />
                        <groupfilter function='member' level='[value]' member='0.82479040226362577' />
                        <groupfilter function='member' level='[value]' member='0.82630138932346919' />
                        <groupfilter function='member' level='[value]' member='0.82863299611304919' />
                        <groupfilter function='member' level='[value]' member='0.84322944327894356' />
                        <groupfilter function='member' level='[value]' member='0.85221351632023878' />
                        <groupfilter function='member' level='[value]' member='0.8591255248902594' />
                        <groupfilter function='member' level='[value]' member='0.86453997884854528' />
                        <groupfilter function='member' level='[value]' member='0.91217321648006799' />
                        <groupfilter function='member' level='[value]' member='0.94548683389378863' />
                        <groupfilter function='member' level='[value]' member='0.98644625028508237' />
                        <groupfilter function='member' level='[value]' member='0.99002030872416358' />
                        <groupfilter function='member' level='[value]' member='1.0' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.14469789208241532' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.80114608976531176' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81382256860404389' />
                        <groupfilter function='member' level='[value]' member='0.82539348523550071' />
                        <groupfilter function='member' level='[value]' member='0.84046293111765857' />
                        <groupfilter function='member' level='[value]' member='0.84350703981661845' />
                        <groupfilter function='member' level='[value]' member='0.84819339289237516' />
                        <groupfilter function='member' level='[value]' member='0.84823823288888678' />
                        <groupfilter function='member' level='[value]' member='0.85118027143048181' />
                        <groupfilter function='member' level='[value]' member='0.85991517506638981' />
                        <groupfilter function='member' level='[value]' member='0.86587882493430923' />
                        <groupfilter function='member' level='[value]' member='0.87058797242674901' />
                        <groupfilter function='member' level='[value]' member='0.87548347299834328' />
                        <groupfilter function='member' level='[value]' member='0.88164306257747505' />
                        <groupfilter function='member' level='[value]' member='0.90784429209718476' />
                        <groupfilter function='member' level='[value]' member='0.90788357344591075' />
                        <groupfilter function='member' level='[value]' member='0.91217321648006799' />
                        <groupfilter function='member' level='[value]' member='0.93529144347783877' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.14761127495014251' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.70875685487978335' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.82586785688837872' />
                        <groupfilter function='member' level='[value]' member='0.83387004932352793' />
                        <groupfilter function='member' level='[value]' member='0.83500334082323946' />
                        <groupfilter function='member' level='[value]' member='0.83923537723717112' />
                        <groupfilter function='member' level='[value]' member='0.84612394755201292' />
                        <groupfilter function='member' level='[value]' member='0.84819339289237516' />
                        <groupfilter function='member' level='[value]' member='0.85345969981217862' />
                        <groupfilter function='member' level='[value]' member='0.8559447113275046' />
                        <groupfilter function='member' level='[value]' member='0.8591255248902594' />
                        <groupfilter function='member' level='[value]' member='0.87328777539585145' />
                        <groupfilter function='member' level='[value]' member='0.8987704339113568' />
                        <groupfilter function='member' level='[value]' member='0.91746577434935117' />
                        <groupfilter function='member' level='[value]' member='0.9505241630555864' />
                        <groupfilter function='member' level='[value]' member='0.98372987063805439' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.15958104237343398' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.66527996908306486' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80102066147086715' />
                        <groupfilter function='member' level='[value]' member='0.80798818470761447' />
                        <groupfilter function='member' level='[value]' member='0.8237328637725746' />
                        <groupfilter function='member' level='[value]' member='0.83268971254621282' />
                        <groupfilter function='member' level='[value]' member='0.83506172120707578' />
                        <groupfilter function='member' level='[value]' member='0.8369866509126439' />
                        <groupfilter function='member' level='[value]' member='0.84606179972953988' />
                        <groupfilter function='member' level='[value]' member='0.85554682636560841' />
                        <groupfilter function='member' level='[value]' member='0.8559447113275046' />
                        <groupfilter function='member' level='[value]' member='0.85774118263501387' />
                        <groupfilter function='member' level='[value]' member='0.86156774653125712' />
                        <groupfilter function='member' level='[value]' member='0.93043200572868601' />
                        <groupfilter function='member' level='[value]' member='0.93529144347783877' />
                        <groupfilter function='member' level='[value]' member='0.95483661994187197' />
                        <groupfilter function='member' level='[value]' member='0.99002030872416358' />
                        <groupfilter function='member' level='[value]' member='1.0000000000000002' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.1603234217607036' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.9082859720626324' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.83860032631285608' />
                        <groupfilter function='member' level='[value]' member='0.8396050235817647' />
                        <groupfilter function='member' level='[value]' member='0.88301532895349832' />
                        <groupfilter function='member' level='[value]' member='0.88731196631330689' />
                        <groupfilter function='member' level='[value]' member='0.90784429209718476' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.16062057593001089' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.76098583488196636' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80268317038343484' />
                        <groupfilter function='member' level='[value]' member='0.80314663820098431' />
                        <groupfilter function='member' level='[value]' member='0.80328248691967596' />
                        <groupfilter function='member' level='[value]' member='0.80460363040431293' />
                        <groupfilter function='member' level='[value]' member='0.83331538770387126' />
                        <groupfilter function='member' level='[value]' member='0.83860032631285608' />
                        <groupfilter function='member' level='[value]' member='0.84322944327894356' />
                        <groupfilter function='member' level='[value]' member='0.84945299702181354' />
                        <groupfilter function='member' level='[value]' member='0.85774118263501387' />
                        <groupfilter function='member' level='[value]' member='0.86021581497005828' />
                        <groupfilter function='member' level='[value]' member='0.86602440728271823' />
                        <groupfilter function='member' level='[value]' member='0.86658059818503741' />
                        <groupfilter function='member' level='[value]' member='0.87349504547783097' />
                        <groupfilter function='member' level='[value]' member='0.87840369795638629' />
                        <groupfilter function='member' level='[value]' member='0.88186417813041384' />
                        <groupfilter function='member' level='[value]' member='0.88809940192711401' />
                        <groupfilter function='member' level='[value]' member='0.90788357344591075' />
                        <groupfilter function='member' level='[value]' member='0.9505241630555864' />
                        <groupfilter function='member' level='[value]' member='0.95624083165448037' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.19233799237784627' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.87294814773515728' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80585826186866671' />
                        <groupfilter function='member' level='[value]' member='0.81327040416451901' />
                        <groupfilter function='member' level='[value]' member='0.8153140402327167' />
                        <groupfilter function='member' level='[value]' member='0.81641913295830493' />
                        <groupfilter function='member' level='[value]' member='0.82479040226362577' />
                        <groupfilter function='member' level='[value]' member='0.83719773433659661' />
                        <groupfilter function='member' level='[value]' member='0.8396050235817647' />
                        <groupfilter function='member' level='[value]' member='0.84459587015843751' />
                        <groupfilter function='member' level='[value]' member='0.84606179972953988' />
                        <groupfilter function='member' level='[value]' member='0.87058797242674901' />
                        <groupfilter function='member' level='[value]' member='0.88809940192711401' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.19477920733421161' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.76049897144661205' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80585826186866671' />
                        <groupfilter function='member' level='[value]' member='0.82186663660824777' />
                        <groupfilter function='member' level='[value]' member='0.8369866509126439' />
                        <groupfilter function='member' level='[value]' member='0.84635982117701547' />
                        <groupfilter function='member' level='[value]' member='0.85221351632023878' />
                        <groupfilter function='member' level='[value]' member='0.85246177578293769' />
                        <groupfilter function='member' level='[value]' member='0.86021581497005828' />
                        <groupfilter function='member' level='[value]' member='0.87522089412478477' />
                        <groupfilter function='member' level='[value]' member='0.88237333348630276' />
                        <groupfilter function='member' level='[value]' member='0.91746577434935117' />
                        <groupfilter function='member' level='[value]' member='0.92331948187083124' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.20140998184604617' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.83067684542914733' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80717494886818864' />
                        <groupfilter function='member' level='[value]' member='0.82586785688837872' />
                        <groupfilter function='member' level='[value]' member='0.83331538770387126' />
                        <groupfilter function='member' level='[value]' member='0.85445203326509056' />
                        <groupfilter function='member' level='[value]' member='0.85961106151730082' />
                        <groupfilter function='member' level='[value]' member='0.86156774653125712' />
                        <groupfilter function='member' level='[value]' member='0.86453997884854528' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.22617354299635559' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.63473497724775119' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80736518416911074' />
                        <groupfilter function='member' level='[value]' member='0.82630138932346919' />
                        <groupfilter function='member' level='[value]' member='0.83078252104130945' />
                        <groupfilter function='member' level='[value]' member='0.83506172120707578' />
                        <groupfilter function='member' level='[value]' member='0.86658059818503741' />
                        <groupfilter function='member' level='[value]' member='0.88511217329983805' />
                        <groupfilter function='member' level='[value]' member='0.8987704339113568' />
                        <groupfilter function='member' level='[value]' member='0.92331948187083124' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.2282765328582908' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.73977300397553303' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.81312795553490702' />
                        <groupfilter function='member' level='[value]' member='0.81641913295830493' />
                        <groupfilter function='member' level='[value]' member='0.8237328637725746' />
                        <groupfilter function='member' level='[value]' member='0.83943564500912327' />
                        <groupfilter function='member' level='[value]' member='0.8651234994402327' />
                        <groupfilter function='member' level='[value]' member='0.86587882493430923' />
                        <groupfilter function='member' level='[value]' member='0.87007611175493571' />
                        <groupfilter function='member' level='[value]' member='0.8715402931330164' />
                        <groupfilter function='member' level='[value]' member='0.87522089412478477' />
                        <groupfilter function='member' level='[value]' member='0.88511217329983805' />
                        <groupfilter function='member' level='[value]' member='0.95624083165448037' />
                        <groupfilter function='member' level='[value]' member='0.98372987063805439' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.30705368014484358' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.80941349903270177' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80736518416911074' />
                        <groupfilter function='member' level='[value]' member='0.80928591105470282' />
                        <groupfilter function='member' level='[value]' member='0.85991517506638981' />
                        <groupfilter function='member' level='[value]' member='0.86602440728271823' />
                        <groupfilter function='member' level='[value]' member='0.87007611175493571' />
                        <groupfilter function='member' level='[value]' member='0.87328777539585145' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.3151943006106448' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.68336016980895931' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='%null%' />
                      <groupfilter function='union'>
                        <groupfilter function='member' level='[value]' member='0.80268317038343484' />
                        <groupfilter function='member' level='[value]' member='0.80334163006516024' />
                        <groupfilter function='member' level='[value]' member='0.80717494886818864' />
                        <groupfilter function='member' level='[value]' member='0.80928591105470282' />
                        <groupfilter function='member' level='[value]' member='0.84046293111765857' />
                        <groupfilter function='member' level='[value]' member='0.8491645059589753' />
                      </groupfilter>
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='5' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.1603234217607036' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='-0.9082859720626324' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Gender Inequality Index (GII)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='6' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.30705368014484358' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.80941349903270177' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Mortality rate attributed to household and ambient air pollution (per 100,000 population)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.3151943006106448' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.68336016980895931' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Vulnerable employment (\% of total employment)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='7' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.20140998184604617' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='-0.83067684542914733' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Child labour (\% ages 5-17)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='8' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.0092641223034304315' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.77779179445644886' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population in multidimensional poverty, intensity of deprivation (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.033071828386701592' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.77527277519437077' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Coefficient of human inequality&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.07539324146547613' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.89010650881576991' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Overall loss in HDI due to inequality (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.22617354299635559' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.63473497724775119' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Maternal mortality ratio (deaths per 100,000 live births)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='9' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.057618813245062184' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='-0.74424995761121959' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Population in severe multidimensional poverty (\%)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='11' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.19233799237784627' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.87294814773515728' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Young age (0-14) dependency ratio (per 100 people ages 15-64)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.19477920733421161' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.76049897144661205' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Mortality rate attributed to unsafe water, sanitation and hygiene services (per 100,000 population)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='12' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.2282765328582908' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='-0.73977300397553303' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Mortality rate, infant (per 1,000 live births)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='14' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.10448542508756076' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.72435357806717171' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Multidimensional poverty index (MPI)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.14761127495014251' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.70875685487978335' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Mortality rate, under-five (per 1,000 live births)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='16' />
              <groupfilter function='union'>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.14469789208241532' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.80114608976531176' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;HDI rank&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[X]' member='0.15958104237343398' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[Y]' member='-0.66527996908306486' />
                    <groupfilter function='crossjoin'>
                      <groupfilter function='member' level='[ID]' member='&quot;Population in multidimensional poverty, headcount (\%)&quot;' />
                      <groupfilter function='member' level='[value]' member='%null%' />
                    </groupfilter>
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
            <groupfilter function='crossjoin'>
              <groupfilter function='member' level='[Degree]' member='19' />
              <groupfilter function='crossjoin'>
                <groupfilter function='member' level='[X]' member='0.16062057593001089' />
                <groupfilter function='crossjoin'>
                  <groupfilter function='member' level='[Y]' member='-0.76098583488196636' />
                  <groupfilter function='crossjoin'>
                    <groupfilter function='member' level='[ID]' member='&quot;Inequality in life expectancy (\%)&quot;' />
                    <groupfilter function='member' level='[value]' member='%null%' />
                  </groupfilter>
                </groupfilter>
              </groupfilter>
            </groupfilter>
          </groupfilter>
          <order>
            <hierarchy name='[Degree]' />
            <hierarchy name='[ID]' />
            <hierarchy name='[value]' />
            <hierarchy name='[X]' />
            <hierarchy name='[Y]' />
          </order>
        </groupfilter>
      </group>
      <layout dim-ordering='alphabetic' dim-percentage='0.637681' group-percentage='0.15942' measure-ordering='alphabetic' measure-percentage='0.202899' show-hidden-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Filter1' name='[Action1]'>
      <activation auto-clear='true' type='on-select' />
      <source datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy' type='datasource'>
        <exclude-sheet name='cor vs time' />
        <exclude-sheet name='ineql vs time' />
        <exclude-sheet name='Sheet 10' />
        <exclude-sheet name='income vs time' />
      </source>
      <command command='tsc:tsl-filter'>
        <param name='special-fields' value='all' />
        <param name='target' value='income vs time' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='HDI map'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
            </column>
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
            <column-instance column='[rowindex - Split 2]' derivation='None' name='[none:rowindex - Split 2:nk]' pivot='key' type='nominal' />
            <column caption='Country Name' datatype='string' name='[rowindex - Split 2]' role='dimension' semantic-role='[Country].[Name]' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 2 ) )' />
            </column>
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Human Development Index (HDI)]' derivation='Sum' name='[sum:Human Development Index (HDI):qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <groupfilter from='&quot;High&quot;' function='range' level='[none:Calculation_2176364570513256461:nk]' to='&quot;Median&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[Longitude (generated)]' field-type='quantitative' max='30305347.56264396' min='-30305347.56264396' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[Latitude (generated)]' field-type='quantitative' max='24377390.030610956' min='-15088752.092065103' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map-layer'>
            <format attr='enabled' id='tab_base' value='true' />
            <format attr='enabled' id='um_lcover' value='true' />
            <format attr='enabled' id='tab_coastline' value='false' />
            <format attr='enabled' id='pp2_line' value='false' />
            <format attr='enabled' id='light_adm0_bnd' value='false' />
            <format attr='enabled' id='light_adm0_lbl' value='false' />
            <format attr='enabled' id='um_adm0_bnd' value='true' />
            <format attr='enabled' id='um_adm0_lbl' value='true' />
            <format attr='enabled' id='light_pp2_statebounds' value='false' />
            <format attr='enabled' id='light_pp2_statelabels' value='false' />
            <format attr='enabled' id='pp2_adminlabels' value='false' />
            <format attr='enabled' id='pp2_statebounds' value='true' />
            <format attr='enabled' id='pp2_statelabels' value='true' />
            <format attr='enabled' id='countybounds' value='false' />
            <format attr='enabled' id='countylabels' value='false' />
            <format attr='enabled' id='zipbounds' value='false' />
            <format attr='enabled' id='ziplabels' value='false' />
            <format attr='enabled' id='tab_areabounds' value='false' />
            <format attr='enabled' id='tab_arealabels' value='false' />
            <format attr='enabled' id='tab_msabounds' value='false' />
            <format attr='enabled' id='tab_msalabels' value='false' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' />
              <size column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]' />
              <lod column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Human Development Index (HDI):qk]' />
              <geometry column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[Latitude (generated)]</rows>
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[Longitude (generated)]</cols>
      </table>
    </worksheet>
    <worksheet name='Sheet 10'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column datatype='real' name='[Gender Inequality Index (GII)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in education (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in income (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in life expectancy (%)]' role='measure' type='quantitative' />
            <column-instance column='[Gender Inequality Index (GII)]' derivation='Sum' name='[sum:Gender Inequality Index (GII):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Human Development Index (HDI)]' derivation='Sum' name='[sum:Human Development Index (HDI):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in education (%)]' derivation='Sum' name='[sum:Inequality in education (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in income (%)]' derivation='Sum' name='[sum:Inequality in income (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in life expectancy (%)]' derivation='Sum' name='[sum:Inequality in life expectancy (%):qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' scope='rows' value='Education (%)' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]' scope='rows' value='Income (%)' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk]' scope='rows' value='Life expectancy (%)' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]' scope='rows' value='Gender Inequality' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Human Development Index (HDI):qk]' field-type='quantitative' scope='cols' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' field-type='quantitative' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='632' />
                <format attr='maxwidth' value='632' />
                <format attr='minheight' value='130' />
                <format attr='maxheight' value='130' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Human Development Index (HDI):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='632' />
                <format attr='maxwidth' value='632' />
                <format attr='minheight' value='130' />
                <format attr='maxheight' value='130' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk] + [federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Human Development Index (HDI):qk]))))</rows>
        <cols>([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk] + [federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Human Development Index (HDI):qk]))))</cols>
      </table>
    </worksheet>
    <worksheet name='cor vs time'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Correlation changes over time</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column caption='HDI_Education_cor' datatype='real' name='[Calculation_2176364570223542272]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CORR([Human Development Index (HDI)], [Inequality in education (%)])' />
            </column>
            <column caption='HDI_income_cor' datatype='real' name='[Calculation_2176364570224312321]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CORR([Human Development Index (HDI)],[Inequality in income (%)])' />
            </column>
            <column caption='HDI_life_cor' datatype='real' name='[Calculation_2176364570225025026]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CORR([Human Development Index (HDI)],[Inequality in life expectancy (%)])' />
            </column>
            <column caption='HDI_gender_cor' datatype='real' name='[Calculation_2176364570237087747]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='CORR([Human Development Index (HDI)], [Gender Inequality Index (GII)])' />
            </column>
            <column datatype='real' name='[Gender Inequality Index (GII)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in education (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in income (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in life expectancy (%)]' role='measure' type='quantitative' />
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Calculation_2176364570223542272]' derivation='User' name='[usr:Calculation_2176364570223542272:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2176364570224312321]' derivation='User' name='[usr:Calculation_2176364570224312321:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2176364570225025026]' derivation='User' name='[usr:Calculation_2176364570225025026:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_2176364570237087747]' derivation='User' name='[usr:Calculation_2176364570237087747:qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk]' field-type='quantitative' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk]' scope='rows' value='Life expectancy' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk]' scope='rows' value='Education' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk]' scope='rows' value='Income' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk]' scope='rows' value='Gender' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' value='57' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570223542272:qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570224312321:qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570225025026:qk] + [federated.1qxw2aq08d8eo71baahps0ny1wcy].[usr:Calculation_2176364570237087747:qk])))</rows>
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='education growth rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
            </column>
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in education (%)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
            <column-instance column='[Inequality in education (%)]' derivation='Sum' name='[pcdf:sum:Inequality in education (%):qk]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative,Compounded' ordering-field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex - Split 3]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-2</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Inequality in education (%)]' derivation='Sum' name='[sum:Inequality in education (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <groupfilter from='&quot;High&quot;' function='range' level='[none:Calculation_2176364570513256461:nk]' to='&quot;Median&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' />
              <size column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' />
              <wedge-size column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[pcdf:sum:Inequality in education (%):qk]' />
            </encodings>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='education vs time'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column datatype='real' name='[Adjusted net savings (% of GNI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Adolescent birth rate (births per 1,000 women ages 15-19)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Antenatal care coverage, at least one visit (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Birth registration (% under age 5)]' role='measure' type='quantitative' />
            <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
            </column>
            <column datatype='real' name='[Carbon dioxide emissions (kg per 2011 PPP $ of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Carbon dioxide emissions, per capita (tonnes)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child labour (% ages 5-17)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child malnutrition, stunting (moderate or severe) (% under age 5)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Coefficient of human inequality]' role='measure' type='quantitative' />
            <column datatype='real' name='[Concentration index (exports) (value)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Current health expenditure (% of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Domestic credit provided by financial sector (% of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Education index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment in agriculture (% of total employment)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment in services (% of total employment)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment to population ratio (% ages 15 and older)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Estimated gross national income per capita, female (2011 PPP $)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Estimated gross national income per capita, male (2011 PPP $)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Gender Inequality Index (GII)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in income (%)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
            <column-instance column='[rowindex - Split 2]' derivation='None' name='[none:rowindex - Split 2:nk]' pivot='key' type='nominal' />
            <column caption='Country Name' datatype='string' name='[rowindex - Split 2]' role='dimension' semantic-role='[Country].[Name]' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 2 ) )' />
            </column>
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Adjusted net savings (% of GNI)]' derivation='Sum' name='[sum:Adjusted net savings (% of GNI):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Adolescent birth rate (births per 1,000 women ages 15-19)]' derivation='Sum' name='[sum:Adolescent birth rate (births per 1,000 women ages 15-19):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Antenatal care coverage, at least one visit (%)]' derivation='Sum' name='[sum:Antenatal care coverage, at least one visit (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Birth registration (% under age 5)]' derivation='Sum' name='[sum:Birth registration (% under age 5):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Carbon dioxide emissions (kg per 2011 PPP $ of GDP)]' derivation='Sum' name='[sum:Carbon dioxide emissions (kg per 2011 PPP $ of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Carbon dioxide emissions, per capita (tonnes)]' derivation='Sum' name='[sum:Carbon dioxide emissions, per capita (tonnes):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child labour (% ages 5-17)]' derivation='Sum' name='[sum:Child labour (% ages 5-17):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child malnutrition, stunting (moderate or severe) (% under age 5)]' derivation='Sum' name='[sum:Child malnutrition, stunting (moderate or severe) (% under age 5):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)]' derivation='Sum' name='[sum:Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Coefficient of human inequality]' derivation='Sum' name='[sum:Coefficient of human inequality:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Concentration index (exports) (value)]' derivation='Sum' name='[sum:Concentration index (exports) (value):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)]' derivation='Sum' name='[sum:Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current health expenditure (% of GDP)]' derivation='Sum' name='[sum:Current health expenditure (% of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Domestic credit provided by financial sector (% of GDP)]' derivation='Sum' name='[sum:Domestic credit provided by financial sector (% of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Education index]' derivation='Sum' name='[sum:Education index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment in agriculture (% of total employment)]' derivation='Sum' name='[sum:Employment in agriculture (% of total employment):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment in services (% of total employment)]' derivation='Sum' name='[sum:Employment in services (% of total employment):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment to population ratio (% ages 15 and older)]' derivation='Sum' name='[sum:Employment to population ratio (% ages 15 and older):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Estimated gross national income per capita, female (2011 PPP $)]' derivation='Sum' name='[sum:Estimated gross national income per capita, female (2011 PPP $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Estimated gross national income per capita, male (2011 PPP $)]' derivation='Sum' name='[sum:Estimated gross national income per capita, male (2011 PPP $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Gender Inequality Index (GII)]' derivation='Sum' name='[sum:Gender Inequality Index (GII):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in income (%)]' derivation='Sum' name='[sum:Inequality in income (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Adjusted net savings (\% of GNI):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Adolescent birth rate (births per 1,000 women ages 15-19):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Antenatal care coverage, at least one visit (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Birth registration (\% under age 5):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Carbon dioxide emissions (kg per 2011 PPP $ of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Carbon dioxide emissions, per capita (tonnes):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child labour (\% ages 5-17):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child malnutrition, stunting (moderate or severe) (\% under age 5):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child marriage, women married by age 18 (\% of women ages 20–24 years who are married or in union):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Coefficient of human inequality:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Concentration index (exports) (value):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Contraceptive prevalence, any method (\% of married or in-union women of reproductive age, 15–49 years):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Current health expenditure (\% of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Domestic credit provided by financial sector (\% of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Education index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment in agriculture (\% of total employment):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment in services (\% of total employment):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment to population ratio (\% ages 15 and older):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Estimated gross national income per capita, female (2011 PPP $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Estimated gross national income per capita, male (2011 PPP $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <groupfilter from='&quot;High&quot;' function='range' level='[none:Calculation_2176364570513256461:nk]' to='&quot;Median&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]'>
            <groupfilter function='level-members' level='[none:rowindex - Split 2:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' />
              <lod column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]</rows>
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='income growth rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
            </column>
            <column datatype='real' name='[Gender Inequality Index (GII)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
            <column-instance column='[Gender Inequality Index (GII)]' derivation='Sum' name='[pcdf:sum:Gender Inequality Index (GII):qk:2]' pivot='key' type='quantitative'>
              <table-calc diff-options='Relative' level-address='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' ordering-field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex - Split 3]' ordering-type='Field' type='PctDiff'>
                <address>
                  <value>-1</value>
                </address>
              </table-calc>
            </column-instance>
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <groupfilter from='&quot;High&quot;' function='range' level='[none:Calculation_2176364570513256461:nk]' to='&quot;Median&quot;' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' />
              <wedge-size column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[pcdf:sum:Gender Inequality Index (GII):qk:2]' />
            </encodings>
          </pane>
        </panes>
        <rows />
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='income vs time'>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column datatype='real' name='[Adjusted net savings (% of GNI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Adolescent birth rate (births per 1,000 women ages 15-19)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Antenatal care coverage, at least one visit (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Birth registration (% under age 5)]' role='measure' type='quantitative' />
            <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
            </column>
            <column datatype='real' name='[Carbon dioxide emissions (kg per 2011 PPP $ of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Carbon dioxide emissions, per capita (tonnes)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child labour (% ages 5-17)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child malnutrition, stunting (moderate or severe) (% under age 5)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Coefficient of human inequality]' role='measure' type='quantitative' />
            <column datatype='real' name='[Concentration index (exports) (value)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Current health expenditure (% of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Domestic credit provided by financial sector (% of GDP)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Education index]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment in agriculture (% of total employment)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment in services (% of total employment)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Employment to population ratio (% ages 15 and older)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Estimated gross national income per capita, female (2011 PPP $)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Estimated gross national income per capita, male (2011 PPP $)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Human Development Index (HDI)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in income (%)]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
            <column-instance column='[rowindex - Split 2]' derivation='None' name='[none:rowindex - Split 2:nk]' pivot='key' type='nominal' />
            <column caption='Country Name' datatype='string' name='[rowindex - Split 2]' role='dimension' semantic-role='[Country].[Name]' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 2 ) )' />
            </column>
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Adjusted net savings (% of GNI)]' derivation='Sum' name='[sum:Adjusted net savings (% of GNI):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Adolescent birth rate (births per 1,000 women ages 15-19)]' derivation='Sum' name='[sum:Adolescent birth rate (births per 1,000 women ages 15-19):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Antenatal care coverage, at least one visit (%)]' derivation='Sum' name='[sum:Antenatal care coverage, at least one visit (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Birth registration (% under age 5)]' derivation='Sum' name='[sum:Birth registration (% under age 5):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Carbon dioxide emissions (kg per 2011 PPP $ of GDP)]' derivation='Sum' name='[sum:Carbon dioxide emissions (kg per 2011 PPP $ of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Carbon dioxide emissions, per capita (tonnes)]' derivation='Sum' name='[sum:Carbon dioxide emissions, per capita (tonnes):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child labour (% ages 5-17)]' derivation='Sum' name='[sum:Child labour (% ages 5-17):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child malnutrition, stunting (moderate or severe) (% under age 5)]' derivation='Sum' name='[sum:Child malnutrition, stunting (moderate or severe) (% under age 5):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union)]' derivation='Sum' name='[sum:Child marriage, women married by age 18 (% of women ages 20–24 years who are married or in union):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Coefficient of human inequality]' derivation='Sum' name='[sum:Coefficient of human inequality:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Concentration index (exports) (value)]' derivation='Sum' name='[sum:Concentration index (exports) (value):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years)]' derivation='Sum' name='[sum:Contraceptive prevalence, any method (% of married or in-union women of reproductive age, 15–49 years):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Current health expenditure (% of GDP)]' derivation='Sum' name='[sum:Current health expenditure (% of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Domestic credit provided by financial sector (% of GDP)]' derivation='Sum' name='[sum:Domestic credit provided by financial sector (% of GDP):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Education index]' derivation='Sum' name='[sum:Education index:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment in agriculture (% of total employment)]' derivation='Sum' name='[sum:Employment in agriculture (% of total employment):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment in services (% of total employment)]' derivation='Sum' name='[sum:Employment in services (% of total employment):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Employment to population ratio (% ages 15 and older)]' derivation='Sum' name='[sum:Employment to population ratio (% ages 15 and older):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Estimated gross national income per capita, female (2011 PPP $)]' derivation='Sum' name='[sum:Estimated gross national income per capita, female (2011 PPP $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Estimated gross national income per capita, male (2011 PPP $)]' derivation='Sum' name='[sum:Estimated gross national income per capita, male (2011 PPP $):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in income (%)]' derivation='Sum' name='[sum:Inequality in income (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Adjusted net savings (\% of GNI):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Adolescent birth rate (births per 1,000 women ages 15-19):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Antenatal care coverage, at least one visit (\%):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Birth registration (\% under age 5):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Carbon dioxide emissions (kg per 2011 PPP $ of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Carbon dioxide emissions, per capita (tonnes):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child labour (\% ages 5-17):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child malnutrition, stunting (moderate or severe) (\% under age 5):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Child marriage, women married by age 18 (\% of women ages 20–24 years who are married or in union):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Coefficient of human inequality:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Concentration index (exports) (value):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Contraceptive prevalence, any method (\% of married or in-union women of reproductive age, 15–49 years):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Current health expenditure (\% of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Domestic credit provided by financial sector (\% of GDP):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Education index:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment in agriculture (\% of total employment):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment in services (\% of total employment):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Employment to population ratio (\% ages 15 and older):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Estimated gross national income per capita, female (2011 PPP $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Estimated gross national income per capita, male (2011 PPP $):qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (\%):qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <groupfilter function='level-members' level='[none:Calculation_2176364570513256461:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]'>
            <groupfilter function='level-members' level='[none:rowindex - Split 2:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='level-members' level='[yr:rowindex - Split 3:ok]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]</column>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]' field-type='quantitative' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' />
              <lod column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]</rows>
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='ineql vs time'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Inequality level changes over time</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
          </datasources>
          <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
            <column datatype='real' name='[Gender Inequality Index (GII)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in education (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in income (%)]' role='measure' type='quantitative' />
            <column datatype='real' name='[Inequality in life expectancy (%)]' role='measure' type='quantitative' />
            <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
              <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
            </column>
            <column caption='Rowindex' datatype='string' name='[rowindex]' role='dimension' type='nominal' />
            <column-instance column='[Gender Inequality Index (GII)]' derivation='Sum' name='[sum:Gender Inequality Index (GII):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in education (%)]' derivation='Sum' name='[sum:Inequality in education (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in income (%)]' derivation='Sum' name='[sum:Inequality in income (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[Inequality in life expectancy (%)]' derivation='Sum' name='[sum:Inequality in life expectancy (%):qk]' pivot='key' type='quantitative' />
            <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2010' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2011' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2012' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2013' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2014' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2015' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2016' />
              <groupfilter function='member' level='[yr:rowindex - Split 3:ok]' member='2017' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk]' field-type='quantitative' scope='rows' type='space' />
            <encoding attr='space' class='0' domain-expand='false' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]' field-type='quantitative' scope='rows' type='space' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' scope='rows' value='Education' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]' scope='rows' value='Income' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk]' scope='rows' value='Ilife expectancy' />
            <format attr='title' class='0' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]' scope='rows' value='Gender' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='width' field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' value='51' />
          </style-rule>
        </style>
        <panes>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='exp' />
            <style>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
          <pane id='5' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='7' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
          <pane id='8' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='linear' />
          </pane>
        </panes>
        <rows>([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in income (%):qk] + ([federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in life expectancy (%):qk] + [federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Gender Inequality Index (GII):qk])))</rows>
        <cols>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</cols>
      </table>
    </worksheet>
    <worksheet name='network'>
      <table>
        <view>
          <datasources>
            <datasource caption='links.csv+ (Multiple Connections) (2)' name='federated.075q0991rufjcb1575y9x00nbtep' />
          </datasources>
          <datasource-dependencies datasource='federated.075q0991rufjcb1575y9x00nbtep'>
            <column aggregation='Sum' datatype='integer' name='[Degree]' role='dimension' type='ordinal' />
            <column datatype='string' name='[ID]' role='dimension' type='nominal' />
            <column aggregation='Sum' datatype='real' name='[X]' role='dimension' type='quantitative' />
            <column aggregation='Sum' datatype='real' name='[Y]' role='dimension' type='quantitative' />
            <column-instance column='[ID]' derivation='Attribute' name='[attr:ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[Degree]' derivation='Count' name='[cnt:Degree:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Degree]' derivation='None' name='[none:Degree:ok]' pivot='key' type='ordinal' />
            <column-instance column='[ID]' derivation='None' name='[none:ID:nk]' pivot='key' type='nominal' />
            <column-instance column='[X]' derivation='None' name='[none:X:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Y]' derivation='None' name='[none:Y:qk]' pivot='key' type='quantitative' />
            <column-instance column='[value]' derivation='None' name='[none:value:qk]' pivot='key' type='quantitative' />
            <column aggregation='Sum' caption='Value' datatype='real' name='[value]' role='dimension' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]' included-values='all' />
          <filter class='categorical' column='[federated.075q0991rufjcb1575y9x00nbtep].[none:ID:nk]'>
            <groupfilter function='level-members' level='[none:ID:nk]' user:ui-enumeration='all' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.075q0991rufjcb1575y9x00nbtep].[none:ID:nk]</column>
            <column>[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='1' field='[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
            <format attr='width' field='[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]' value='207' />
          </style-rule>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.075q0991rufjcb1575y9x00nbtep].[none:value:qk]' num-steps='5' palette='blue_10_0' type='interpolated' />
            <encoding attr='color' field='[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]' num-steps='5' palette='red_10_0' type='interpolated' />
          </style-rule>
          <style-rule element='annotation'>
            <format attr='fill-color' id='annotation_681' value='#00000000' />
            <format attr='stroke-color' id='annotation_681' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_684' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_684' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_685' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_685' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_686' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_686' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_682' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_682' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_687' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_687' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_688' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_688' value='#d4d4d400' />
            <format attr='fill-color' id='annotation_689' value='#fafafa00' />
            <format attr='stroke-color' id='annotation_689' value='#d4d4d400' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.075q0991rufjcb1575y9x00nbtep].[none:value:qk]' />
              <lod column='[federated.075q0991rufjcb1575y9x00nbtep].[none:value:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.16392265260219574' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]' y-index='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]' />
              <size column='[federated.075q0991rufjcb1575y9x00nbtep].[none:Degree:ok]' />
              <tooltip column='[federated.075q0991rufjcb1575y9x00nbtep].[attr:ID:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.64767956733703613' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
                <format attr='mark-color' value='#e15759' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>([federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk] + [federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk])</rows>
        <cols>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</cols>
        <annotations>
          <annotation class='point' id='681' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontcolor='#000000' fontsize='14'>HDI</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.0032571898244662251'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='0.4680543281058176'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-22' y='23' />
          </annotation>
          <annotation class='point' id='682' mark-position='1' pullback='12' text-width='180'>
            <formatted-text>
              <run bold='true' fontsize='12'>Gender Inequality</run>
            </formatted-text>
            <point>
              <visual-coordinate class='mark'>
                <tuple-reference>
                  <tuple-descriptor>
                    <pane-descriptor y-index='1'>
                      <x-fields y-index='1'>
                        <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</field>
                      </x-fields>
                      <y-fields y-index='1'>
                        <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</field>
                      </y-fields>
                    </pane-descriptor>
                    <columns>
                      <field>[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]</field>
                      <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:Degree:ok]</field>
                      <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</field>
                      <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</field>
                      <field>[federated.075q0991rufjcb1575y9x00nbtep].[attr:ID:nk]</field>
                    </columns>
                  </tuple-descriptor>
                  <tuple>
                    <value>5</value>
                    <value>5</value>
                    <value>0.1603234217607036</value>
                    <value>-0.9082859720626324</value>
                    <value>&quot;Gender Inequality Index (GII)&quot;</value>
                  </tuple>
                </tuple-reference>
              </visual-coordinate>
            </point>
            <body x='7' y='12' />
          </annotation>
          <annotation class='point' id='684' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontsize='12'>Education Inequality</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.096790734716494367'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='-0.89484323157207235'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='78' y='-9' />
          </annotation>
          <annotation class='point' id='685' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true' fontsize='12'>Income Inequality</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.029466514105058655'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='0.92148156307170059'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='2' y='3' />
          </annotation>
          <annotation class='point' id='686' mark-position='1' pullback='0' text-width='272'>
            <formatted-text>
              <run bold='true' fontsize='12'>Life Expectency Inequality</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='0.16061840417775153'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='-0.76181646235483025'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='93' y='-6' />
          </annotation>
          <annotation class='area' id='687' text-pinx='0.5' text-piny='0.5' text-width-delta='-18'>
            <formatted-text>
              <run>larbour force</run>
            </formatted-text>
            <top-left>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.99891600404338088'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='0.6116045047233778'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </top-left>
            <bottom-right>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.62765070804296264'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='0.20429338152787913'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </bottom-right>
            <text x='0.5' y='0.5' />
          </annotation>
          <annotation class='area' id='688' text-pinx='0.5' text-piny='0.5' text-width-delta='-18'>
            <formatted-text>
              <run>population</run>
            </formatted-text>
            <top-left>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.86154784452322608'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='-0.11748240579656488'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </top-left>
            <bottom-right>
              <visual-coordinate class='axis'>
                <x-coord axis-value='-0.49028254852280795'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='-0.52479352899206377'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </bottom-right>
            <text x='0.5' y='0.5' />
          </annotation>
          <annotation class='point' id='689' mark-position='1' pullback='0' text-width='180'>
            <formatted-text>
              <run bold='true'>infants condition</run>
            </formatted-text>
            <point>
              <visual-coordinate class='axis'>
                <x-coord axis-value='0.64207660427846758'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</axis>
                  </node-reference>
                </x-coord>
                <y-coord axis-value='0.11875804565682424'>
                  <node-reference>
                    <axis>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</axis>
                  </node-reference>
                </y-coord>
                <page-reference />
              </visual-coordinate>
            </point>
            <body x='-36' y='-20' />
          </annotation>
        </annotations>
      </table>
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='1' name='ineql vs time' w='49200' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='98000' id='3' name='cor vs time' w='49200' x='50000' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Dashboard 2'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='49000' id='5' param='horz' type='layout-flow' w='98400' x='800' y='50000'>
            <zone h='49000' id='3' type='layout-basic' w='98400' x='800' y='50000'>
              <zone h='49000' id='1' name='income growth rate' w='98400' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone h='49000' id='9' name='HDI map' w='49200' x='800' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone h='49000' id='11' name='income vs time' w='49200' x='50000' y='1000'>
            <zone-style>
              <format attr='border-color' value='#000000' />
              <format attr='border-style' value='none' />
              <format attr='border-width' value='0' />
              <format attr='margin' value='4' />
            </zone-style>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
    <dashboard name='Dashboard 3'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <datasources>
        <datasource caption='dftab1_melt_pivot1' name='federated.1qxw2aq08d8eo71baahps0ny1wcy' />
      </datasources>
      <datasource-dependencies datasource='federated.1qxw2aq08d8eo71baahps0ny1wcy'>
        <column caption='HDI level' datatype='string' name='[Calculation_2176364570513256461]' role='dimension' type='nominal'>
          <calculation class='tableau' formula='if [Human Development Index (HDI)] &lt;= 0.65 THEN &apos;Low&apos;&#10;ELSEIF [Human Development Index (HDI)]&gt;0.65 and [Human Development Index (HDI)]&lt;0.85 THEN &apos;Median&apos;&#10;ELSEIF  [Human Development Index (HDI)]&gt;=0.85 THEN &apos;High&apos;&#10;END' />
        </column>
        <column-instance column='[Calculation_2176364570513256461]' derivation='None' name='[none:Calculation_2176364570513256461:nk]' pivot='key' type='nominal' />
        <column-instance column='[rowindex - Split 2]' derivation='None' name='[none:rowindex - Split 2:nk]' pivot='key' type='nominal' />
        <column caption='Country Name' datatype='string' name='[rowindex - Split 2]' role='dimension' semantic-role='[Country].[Name]' type='nominal' user:SplitFieldIndex='2' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
          <calculation class='tableau' formula='TRIM( SPLIT( [rowindex], &quot;,&quot;, 2 ) )' />
        </column>
        <column caption='Year' datatype='date' datatype-customized='true' name='[rowindex - Split 3]' role='dimension' type='ordinal' user:SplitFieldIndex='3' user:SplitFieldOrigin='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[rowindex]'>
          <calculation class='tableau' formula='DATE(DATEPARSE ( &quot;yyyy&quot;, SPLIT( [rowindex], &quot;,&quot;, 3 ) )) ' />
        </column>
        <column-instance column='[rowindex - Split 3]' derivation='Year' name='[yr:rowindex - Split 3:ok]' pivot='key' type='ordinal' />
      </datasource-dependencies>
      <zones>
        <zone h='100000' id='2' type='layout-basic' w='100000' x='0' y='0'>
          <zone h='98000' id='5' param='horz' type='layout-flow' w='98400' x='800' y='1000'>
            <zone h='98000' id='3' type='layout-basic' w='82400' x='800' y='1000'>
              <zone h='49000' id='1' name='education growth rate' w='82400' x='800' y='50000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='9' name='HDI map' w='41200' x='800' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='49000' id='11' name='education vs time' w='41200' x='42000' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
            <zone fixed-size='160' h='98000' id='4' is-fixed='true' param='vert' type='layout-flow' w='16000' x='83200' y='1000'>
              <zone h='14541' id='6' name='education growth rate' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' w='16000' x='83200' y='1000'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='10750' id='7' name='education growth rate' pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' w='16000' x='83200' y='15541'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='14541' id='8' name='education growth rate' pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' type='size' w='16000' x='83200' y='26291'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='14541' id='10' name='HDI map' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' w='16000' x='83200' y='40832'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='14541' id='12' name='education vs time' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='filter' w='16000' x='83200' y='55373'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='14541' id='13' name='education vs time' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]' type='filter' values='cascading' w='16000' x='83200' y='69914'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
              <zone h='14545' id='14' name='education vs time' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' w='16000' x='83200' y='84455'>
                <zone-style>
                  <format attr='border-color' value='#000000' />
                  <format attr='border-style' value='none' />
                  <format attr='border-width' value='0' />
                  <format attr='margin' value='4' />
                </zone-style>
              </zone>
            </zone>
          </zone>
          <zone-style>
            <format attr='border-color' value='#000000' />
            <format attr='border-style' value='none' />
            <format attr='border-width' value='0' />
            <format attr='margin' value='8' />
          </zone-style>
        </zone>
      </zones>
    </dashboard>
  </dashboards>
  <windows source-height='72'>
    <window class='worksheet' name='network'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='169'>
            <card param='[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]' show-domain='false' show-null-ctrls='false' type='filter' />
            <card param='[federated.075q0991rufjcb1575y9x00nbtep].[none:ID:nk]' type='filter' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[ID - Split 1 &amp; ID - Split 2 (Combined)]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[cnt:Degree:qk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:Degree:ok]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:ID - Split 1:nk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:ID:nk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:X:qk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:Y:qk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:value:qk]</field>
            <field>[federated.075q0991rufjcb1575y9x00nbtep].[none:var1:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{D7684786-24D9-449F-B06A-D84A355A7708}' />
    </window>
    <window class='worksheet' maximized='true' name='Sheet 10'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
      </viewpoint>
      <simple-id uuid='{6114288A-A24B-447C-AC6C-29605858E1ED}' />
    </window>
    <window class='worksheet' name='ineql vs time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{CFEB8B1A-0CD9-4EAA-AE3B-60E9CF2A99E6}' />
    </window>
    <window class='worksheet' name='cor vs time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='2' />
      </viewpoint>
      <simple-id uuid='{2F80755B-5F6E-4B3E-BFE4-285AFAABBD0B}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints>
        <viewpoint name='cor vs time'>
          <zoom type='fit-width' />
        </viewpoint>
        <viewpoint name='ineql vs time'>
          <zoom type='fit-width' />
        </viewpoint>
      </viewpoints>
      <active id='1' />
      <simple-id uuid='{ACA0BF16-A5DE-4DB3-A7B1-05002DC253EF}' />
    </window>
    <window class='worksheet' name='HDI map'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570317750279:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{25EFC37C-A87C-431D-9157-18FBD30388A5}' />
    </window>
    <window class='worksheet' name='income vs time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='283'>
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='filter' />
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]' type='filter' values='cascading' />
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' />
            <card pane-specification-id='2' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570317750279:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{469D56DF-0BE4-4A5F-A376-069E0852D83B}' />
    </window>
    <window class='worksheet' name='education vs time'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='66'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='filter' />
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:rowindex - Split 2:nk]' type='filter' values='cascading' />
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' />
            <card pane-specification-id='2' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570317750279:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0BE3B7ED-27F1-4FF1-9239-DACE765E2D38}' />
    </window>
    <window class='worksheet' name='income growth rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='283'>
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570317750279:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{C21447F5-6D95-4A1C-B159-3326E684FABB}' />
    </window>
    <window class='worksheet' name='education growth rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='283'>
            <card param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]' type='filter' />
            <card pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[sum:Inequality in education (%):qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <zoom type='fit-width' />
        <highlight>
          <color-one-way>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570317750279:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[yr:rowindex - Split 3:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{AB43A816-FF63-44CD-91CB-4647D7240DE7}' />
    </window>
    <window class='dashboard' name='Dashboard 2'>
      <viewpoints>
        <viewpoint name='HDI map'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='income growth rate'>
          <zoom type='fit-width' />
          <highlight field='[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]'>
            <bucket-selection />
          </highlight>
        </viewpoint>
        <viewpoint name='income vs time'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{03331CCE-E0AD-420C-B97D-165593F7CA35}' />
    </window>
    <window class='dashboard' name='Dashboard 3'>
      <viewpoints>
        <viewpoint name='HDI map'>
          <zoom type='entire-view' />
        </viewpoint>
        <viewpoint name='education growth rate'>
          <zoom type='fit-width' />
          <highlight>
            <color-one-way>
              <field>[federated.1qxw2aq08d8eo71baahps0ny1wcy].[none:Calculation_2176364570513256461:nk]</field>
            </color-one-way>
          </highlight>
        </viewpoint>
        <viewpoint name='education vs time'>
          <zoom type='entire-view' />
        </viewpoint>
      </viewpoints>
      <active id='-1' />
      <simple-id uuid='{8FF4791F-AF77-42C3-8263-1AA638F4C59E}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      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
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Dashboard 2' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 3' width='192'>
      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
      WYgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='HDI map' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Sheet 10' width='192'>
      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
      tcO/F9bT4XDg8XjweDxMTk6u676xsTGCwZXzgVeC2+1mdHSUVCrFnTt3NpVvkUqlcLvdRKNR
      hoeHN5WHEgqFcmNkYT3u/j37XbxvE0CSJDo7OxkaGiIS2ZynNFtOKBSiu7ubd999l3Q6za1b
      tzZd3sTEBG+88QZ2u514PM7Nmzc3dL/dbieZTNLe3r6u6+fm5pAkievXr9Pb28vAwMC6J088
      HufMmTM4nU4GBwfp6OhYd5Tk9PQ0AwMDpFIpuru7GRkZWdbIsRAul4vZ2dl1t20hAoEAvb29
      tLa2IggCnZ2dGy6jq6uL1tZW2tvbmZubY3R0dMNlXLp0iXQ6TXd3N3K5PPf9dnZmFCm7urpI
      pVL09PTQ19f3/k4AjUaD0Wjc0ootk8kIBAJUVlYiSRJVVVWLaFo2AlEUuXr1Kmq1GpfLRUVF
      xYbfTnNzc1RXV6/7Po1Gw9DQEDt27CA/Px+j0bju+l+9ehWDwcDExASFhYVotdp1PzcQCKDR
      aOjo6ECn02E2m9eceNFolOLi4k1FYobDYUpLSxFFkerq6g2/AYLBIIODg0SjURKJBOXl5Rmr
      1AYRi8VwOBzMzMxQVVWVG3uxWCxXL1EU0ev1GI3G928CZA9tHo8HvX5pAvV6IYoiU1NTxONx
      bDYbb7/9NmVlZWvfuAxkMhlPPvkkTU1NbNu2jWvXruUIv9aLuro6Ll26tG6z8PT0NHK5nGg0
      SjQaxe/353ST18LRo0fZvXs39fX1OJ1OZDLZus8SFRUVRKNRioqKSKfTOJ3OHMvHSiguLsZu
      t29KFH18fJxkMklFRQVvvfXWIhqd9SAvL48nn3ySuro6bDYb77777qa+5+yi1tzcvKge1dXV
      nD9/HpvNxtTUFIlEgmAwuDlH2GpY6AjLFn2vDmE/6fKyjjCj0bipQ+1W6r+Ze7MOyyzWutfr
      9eacfJvt43vxHW21n7JWr2w5Pp9vSbuyn72vVqB7bX34aSlvsxadrdR/M/dupp5b7eN78R1t
      tZ8WqhetVGZOhHvTT/oZfoZ/AfjZBPgZ/r/G+zoBXC7Xhk/yvb29DA8P4/f7l1hL+vv7V713
      NfNoIpHIqdqvZA1pa2ujr6+Pnp4ePB4Pfr+fs2fPrml5GR8f33ASd29vL/39/YRCoSX27rvb
      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
    </thumbnail>
    <thumbnail height='192' name='cor vs time' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='education growth rate' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='education vs time' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAZd0lEQVR4nO3dWW9c553n8e9Zai+yiltxERWJ8qaNtmSPlDiOkQ6MLHfpdDqYTHcDg+me
      NAaNAQbIbW5ynVcwPZ70AD3JxfR03zjojpNJrDhw4lhyYpu2VoqSuBWLVax9PXWWZy4OScsL
      KxJFFpf6fwCiyKrDw4dVz++c8zznOc/RlFIKIXqUvtcFEGIvSQBET5MAiJ4mATgEqtUqnudR
      rVb3uigHjrnXBRCP7pVXXmFkZIT5+XkuXLiApmk0m03i8TjJZJK1tTVOnz5NMBjc66LuO5r0
      Ah185XKZ7373u3zve9/jBz/4AQDT09Ncv36d6elpotEo3/72twkEAntc0v1H9gCHQCKR4MyZ
      M0xMTBAOh3nssce4ceMGfX19hEIhvvKVr0jl34LsAQ4J27YxTRPLsvA8D6UUhmFgGAamaaJp
      2l4XcV/a8QBsrE7ecHEQbLsXyPM8PM8DwHVd7s/RxvNC7HfbagN4nscbb7xBvV7nySefZHZ2
      lqmpKR5//HGUUriuKyEQB8K2AqDrOsPDwywvL5PJZPjiF7/IlStXeOqpp1BKoWkahmHsdFmF
      2HHbOgRyHIeJiQn6+vpwXZe1tTU55hcH0rYCoGkac3NznDhxgosXL5LJZHj22Wd3umxC7Lpd
      6QXyPE8OgcSBIGOBRE+TAIietudDIdxSifI//wt6fz/myDDmyAjG8DB6JIIWCqOFgtLAFrtm
      zwOgR6MEH38Me2GJ1nszOLkcTm4NzTDQ4zH0eB/G4ADG0BCBVAojNYI5PIKRTIBhoJkm2i62
      N5RSoBR4Hngeav3RsyxUo4HXbIJSBKem0Mw9fzvFQ9qXjWDleXjVKm6phJsv4BQKuLkc9uoq
      bj6Pk1tDNRroySRGMok5OIgxMoyZGvH3IIODmKkUWiAAmuZ/+YXbfFSOg2q18OoNvFrN/6rX
      8RrrP288bjzXbKKsNl6jgWq1ANBCIfR4DBwHc2ycwe/8Debw8KO+haKL9mUAHoTXauGu5XHW
      1nALBX/PsbqKWyji5PO4pRJ6JII5PIze34+yLLxmE69a9Stzu40WDKJHI+ixOHo0ih6L+o/x
      9Z/jMf+1eAwtHPFf33gtHP6wLJZF+Z/+L4233mLwb/6ayPnzu/q/i51zYAOw5d/fOFRxXdxi
      EbdQwC2X0UNhtEgEo78fLRpBj0bRdP3DPcT613bbG0opmleuUPzHHxF78QskvvGnaHIByr53
      6AKw1+yVFQov/xDNMPxDolRqr4skOpAA7AKv1aL8z/9C463LDP7nvyb89NPSk7VPSQB2iVKK
      5uXLFP/3j4i98AL93/jTj7QbxP4gAdhlTi5H/r//Pbgeg3/7HQIT43tdJHEfCUAXKNum8spP
      qL12ieR/+PdEX3hBDon2CQlAFzVn3qf4w38g/PQ0yb/8Czkk2gckAF3mlkoUXv4hbrHI4N/9
      F4KTk3tdpJ4mAdgDyrap/Ou/UfvZz0n+1V8Sff5z/jkJ0XUSgD2ilML64CqFf/hfhJ95muS3
      /hw9FtvrYu0IpZR/5r1exy2VcLJZlGX5Q1PAHzNlmKCBFgz5zwXWx3Rp2uYJxI2fATAMQEPT
      NdB1/3tzvY5pmj8sJRR66LJKAPaYUyhQePl/4lUqDP7tdwgeO7bXRXogSimwbbxWC69SxV7N
      4KRXsNNpnEwGt1QG5aEZJsbIMFooBLbt/67jolzHH5Nltdefs8H1UMpDtdvrf0WDjb6C9SBo
      n/Ic+KHQoxHM4RHM0ZQ/JmxkGDM1ih4Jo4VC/tfHOh8kAPuAsm2qP/9/VP/130h88xvE/uRP
      dnWE6wOXSylwXZRt41VrfiXPrOKsrGAvL+MWS/5oWNfFHBkhcHQSc3zcH5SYSmEMDKDH49s+
      vFOOszmAUW2Ex/PA9QB/QCMAnsJrNnCLRZzcGk4mg5Nbwy3kN0cWa5EwRp8/5N5YH3ZvjoxI
      APYTa3aWwt+/TODYMQb+03/EiMd3/W9uDvdWCq/R8Cv46ir2ygr20hLumj+w0Gs2/Uo+OUlg
      YtyvQGOjGCMjGInEvm3DKM/Dq1RwCkV/bNjaGs7qKk4+j5NZlQDsN261SvEff0T79m2G/uvf
      EXrssUdep3IcvFoNt1rFLfgDBL1KBadYxCtX/NGzhTxuuYKZShEYG8UcHycwPo45Ooo5Ooox
      NLhvK/mjOFQB8JSiZllUrBYVq0Wx2aDQaFJqNTeXsV0X+PBfVpvPfcjxPFz10Ym92h9bBvXh
      c6au88TwCGdHx5gaGCLwiP+78jzql35F6f/8E4k//zPiL730qYdEynH86xVqNdxy2d9SV6q4
      xSJ2Or1eyUt4pRJaIICe6EePxTH6+9CTScyhIYxEwr9+YjSFMTzsN1AfYVTsQXOgAmC7Lg3b
      pt62KLWalFst8o06xaZfyUvNJqauEwkEiAYC9IcjDEej9Icj6OstJ0PXMD62JQt+rKyGpmPo
      2seW+eTVXhu/53ge13OrzKykaToOp1OjnB0d51hy4JHCYM3dofA/XiYwPk7wqSf9od2FIl6l
      glsq4hZLaOH1xl0wiNGfwEgmMAYG/K32wADGQBK9v9/vIdm4ek7XD1UFdz0PfZuh3XYAXNdF
      /5Q3crsBUEphey4t26Fut6laLfKNBsVmg1KrSaHRoGpZmLqOsV7JByIRBiJRhqIxkuEIyXCY
      cCBAyDAx9+BDbrsO6UqF91dXuJXL4inFqdQo58aPMBrv21YY3GqNyk9+glcuoycS/lY7mfQr
      diLhXzsdCPhfB/CSTNfzcJXCdl0cz8PxXGzXo+06NG2blmPTWH/0f3ZoOTYt26Fpt2k5Dm3X
      JWgYjPf3M9GXYDTeRyoeJx4MEfoj78m2ArC6usq1a9cw11duGAbnz58nEok8dADqbYuf3rpB
      tlalYbc3r1oMBwIMRe+v3H5ljwRMwmbgkQ8zdpvlOKSrZWZW0szm1wgaBqdTY5wZHSMVi39i
      L3TYeEphOQ7FZoOVaoVis0HbdWk5DvV2m7br0LJtmo6DBiiU3xZffwwYBpH1zzkeChI2A0TM
      AOFAgLBpEjZNooEgIdMkZJo02m1Wa1WWK2WWK2UadhtTN0iEw3wmOUAqFmc03kciHCYSCKJv
      dKtuJwBKKa5du0a9XqdUKhEIBPjc5z5HMBjcnBxXf8APuO06fLCaIRoIkgiHiQWDxIJBDO3w
      VBDbdZkvFflgdYW5YoG+UIhTqVFODacYjEQ3P4yDSgFtx6HatlipVVmuVEhXy1RaLTzlMRSJ
      MhCOEDYDhEyTSGCjMn+4MQsaBgF9/dEwHvk9ado2FatFtlZlsVwm16iRrdcxdJ2+UIiR9UBs
      KwCLi4vMzc3x/PPPUygUyGQyDAwMcPz4cekF+iMcz2Uun+ft5QVu5/OMxGKcGR1jenSCZCSy
      78OglMJTinKrxVKlxFK5RLpSYa1Ro+26HE0kmehPcDSRZCQWZzAS3Td7O9fzqFgtcvU66fU9
      xbYCkM/nWVhYIJFIoGkatVqN06dPYxiGBOAhNO02N3M53l9Nc2stx9HEAOcmjnA2NUZ0n1xP
      rJSialmkq2XSlQrzpSIr1TJtxyUVj3M0McDUwCBjfX0MRWMHrnF9oHqBDiulFC3H4Xpulfcz
      K9wt5jmWHODpsQlOjowS61IYlFLrhw01litlFstF0pUKLcdmLN5PKt7HsYEBxvv6GYnFMQ5B
      d6kEYJ9RStGw21zPrvJeJk2mWuVoIsnQHxkoZ2if7N69nwYEPqUrF/wG68r6IYHlOiTDESb6
      +plMDHA0kWQgGiW4A8fl+5EEYB/zj7Wb3MxlqVitjsu6nvrEybv7KQW2537qaxowEosz3tfP
      aLyPSCCwb47bd5sEQPS03oi5EFuQAIieJgEQPU0CIHqaBED0NAmA6GkSANHTJACip0kARE+T
      AIieJgEQPU0CIHqaBED0NAmA6GkSANHTJACip0kARE+TAIieJgEQPU0CIHratgPgeZ5/L6j1
      i+CFOIi2NZ3wxuS4wWAQXdcpl8t84QtfIN6FO5oIsZO2nBal3W5z+fJl8vk88Xicz372s5sV
      XCnFzZs3KZVKWJbFiRMnaLfbm3ODPszkuELspS33AHNzc5w8eZKhoSFqtRq3b9/m3LlzAKTT
      abLZLJ///Oe5dOkSxWKRoaGhzblBNU2TeYHEgbBlACYmJvjpT38KwODgIF/+8pc3XwuFQkQi
      Ee7evcv09DTZbJbx8fHdL60QO2zLAOi6Tl9fHwCxj81LOTw8zPDw8ObPY2Nju1Q8IXbXlgEI
      h8OcP3+efD5PNBrtZpmE6JotA7C0tES1WuXq1au4rsvx48fluF4cOlt21QwPD/POO+8wOTm5
      2d0pxGGzZTfovXv3iMfj1Ot1UqkU6XSaxx7gps0yO7Q4SLY8BBoYGODNN9/EsixM0+T8+fPd
      LJcQXdHx/gAbffobizzI7XBkDyAOko5DIe7evcvVq1cJBAJ89atf7VaZhOiaji1bz/PQNG3z
      hthCHDYdA2AYBrVajXg8zg7fSUmIfaFjAFZWVmi329y5c6db5RGiq7Y8tikWiwQCAWKxGEeP
      Hj3w94MV4tNsuQcIBoPMzs5y9uxZFhYWcN1Pv8WmEAfZlgGIxWK89NJLzMzMMDAwIN2a4lDq
      2Aa4e/fu5rkAIQ6jjgFot9skEgn6+/u7VR4humrLRrBlWQwNDdFoNGQ4tDi0ttwDeJ5Ho9Ho
      ZlmE6LqOY4HK5TKmaRKNRh+4HSBjgcRB0nGMg+M4XLp0iZWVFb7+9a8zMTHRrXIJ0RUdG8HF
      YhFN0/jWt75FNpvtVpmE6JotA6CUYmZmhtOnT/P6669z9uzZbpZLiK7oGADTNCmXy1y4cEGO
      6cWhtGUAcrkck5OTLCwsMDc3180yCdE1WwbAcRzu3bsHIEOhxaG1ZQCOHDnCiy++uDnX5/08
      z+PatWsopZibm+PKlSu0Wq1dL6wQO61jN+js7CyDg4PcuXPnI337nudRLBY3J8mNx+Nomobr
      upuBkSnTxUHQMQBHjhzhvffeY2pq6iPzAt0fhIsXL5JOp0mn00xNTcnkuOJA6XgeYHR0lBde
      eIFyufyRw6BCoYBpmty+fZtCoYBt2xw9enTXCyvETuu4B8hms8zMzDA6OvqRhvDQ0BBDQ0O7
      XjghdlvHPcDCwgKe5/H73/+e999/v1tlEqJrOgagr68Pz/NIpVKbN8cQ4jDpGIDx8XEsy+LU
      qVNyVZg4lDoG4OrVq4TDYa5evSrdmuJQ6hiAixcv0mw2efLJJ2V6dHEodazVv/71rzl27BiR
      SKRb5RGiqzoGYHJyksXFRTKZTLfKI0RXbRmASqXC3Nyc3B1GHGpbXhPseR6WZfkLaRqhUEju
      DyAOnS037bquMzc3h23bhMNh6QYVh1LHY5tgMMiPf/xjLl26JNcEiEOpYwBCoRBDQ0PE4/Fu
      lUeIruoYgKWlJer1Ojdu3JATYeJQ6nh/gFAoRDKZ5OjRo9ITJA6ljvcHuHXrFqdPn+bevXuy
      BxCHUsf7A3zpS19iZmaGZDIpewBxKHWs1YuLiyilpPKLQ6tjza7X68TjcWKxWLfKI0RXdQzA
      s88+i1JKbpAhDq2OAbhy5QqBQIBr165JI1gcSh0DcOHCBcrlMo8//ri0A8ShtOV5gHQ6TS6X
      I5PJUK/XmZ6elvFA4tDZcrNumib37t3ja1/7GsFgsJtlEqJrthwOrZTi1q1bZDIZzp49+4l5
      gO7/tfu7SmU4tDhIOt4jbCvVapVXX32Vb37zm7z99tsUi0VefPFFotGoBEAcKB1nhttKJBLZ
      vF9Yo9Hg9OnTrKyscPz4cZkcVxwo2wrA/ZPjOo5DuVwmmUxiGIZMjisOlG31bRYKBXRdZ3Z2
      lpMnT9JutxkfH9/psgmx67bVBuhE2gDiIJGzW6KnSQBET5MAiJ4mARA9TQIgepoEQPQ0CYDo
      aRIA0dMkAKKnSQBET5MAiJ4mARA9TQIgepoEQPQ0CYDoaRIA0dMkAKKnSQBET5MAiJ4mARA9
      TQIgepoEQPQ0CYDoaRIA0dO2NTXi/S5fvozjOJw/f55IJLITZRKiax45ALlcjoGBAQzDwHXd
      zZnhZHJccRA88tSI+XyepaUl+vv7OX78OACu68rUiOJAeOQ9QDabxbIsJicn0TRtc3ZouZ2S
      OAhkclyxa5TngvLAs/0nXKfTwijlbvGaAq/D73oOGCG0YAQCsYfa+D7yHkAcPMpz/EqlPPBc
      wK9gH6mwroNyWuC0UHYDHAtl1cC1UU7T/95potw22E2U3YJ27b6fm2A3QcP/W9z3+GllQnV8
      HTq8phRoOpqug26ihfrQYiNosRH02AhaZBAtOoAWH0WLDIAZQjNCYAZlD7CfKeWB3cKrZVC1
      nF8ZPQdcG1wL5dp+xXRafsV1WijHAuWirDq4ll9hPQeclv+92/a3mEqBcv0AKIXybP95bz0A
      SoEZAjOMFgijBSIQjKMZQQhE0MwwWigORhDMiP96IOIva258HwEjALp/k0XNCMCWW2fNX/ZT
      X9JA3+K19fUqu4VqV6FVQVkVvHoOVcuhahm8+hqqVUbVc34oAxG0jf9NArB/bFb4/CzO0tu4
      S1fw8ncAhRYZQDPDfiUxgmhm0K8UZsh/Xjf8D9QIga5vVkDNCIJurm/1gn6FNUJomu6vywz6
      W89AxH/eCPi/axzOO4Mqx0I1SyjLD4oEYI+pdh139Sru0hXcpbdxs9fRIgOYkxfQJ57BPPIc
      WvIzfoUVO04C0EVKeahGATfzPt7KDG7697jZm+iDxzHGnsY48hzGxDNosRSaLu9fN0gAdpHy
      XFQljbv6Pm76Xdz0O6h6Hq1vDGPiGczPPI+eOoUWTvqHHqLr9jwASilUq7TeG7GLNN3fqm40
      pgwTNGNHt7TKsVDVFdzVa7iLl3FXP0C16+jxFMbkv8MYP7de4RNS4feJPQ+AV0nTfOW/+V1t
      u0nT0NYf15/wvzTACIFu+JVSD643GM3NRiaa4TcSNX2z9wBd93s71tfpZj7Ay15HuRb6wNT6
      4cw59MEpvxtOTgzuS3seAACvvtb5RMdOUJ7f1+1unJRZ7/ZTLspp+12CdtPviXFaHy7rWP5J
      GrvpL+NYH3Y12q31f8DBGH4CY+K8X+HDid39X8SO2RcBEGKvSN+a6GkSANHTJACip0kARE+T
      AIieJgEQPU0CIHqaBED0NAmA6GkSANHTHjkASilcd5dHcgqxSx45AL/5zW/4+c9/TrVa3Yny
      CNFVjxwA13U5e/Ys2Wx2J8ojRFc9cgDa7Ta5XE7mBRUH0iMH4JlnniEcDjM2NrYT5RGiq3b0
      eoD7J8eV6wHEQbCjM8Ppus5GnnT9wXYuG8s/zCWDDzv57sZ8pbJ+Wf/H17+jAdgoxMNMjrud
      a2UfdvLdh/0bh2H9D/N7+7H83Vr/jp8I0zRty/QqpajVaqTTaVzXJZ1OY1kWtm1TrVZRSpHJ
      ZGg0Ol8g32nr0Gq1WF5exrZtCoUCpVIJpdTmY6PRwLKsba+/3W5vlrtcLpPP51FKUS6X8TyP
      UqnE6uoqnY4sO63f8zyy2SylUolms0kmk8HzPKrVKrZtU6vVWFpawnG2vobaMIwtK4XjOKTT
      aZrNJsVikWKxiFKKYrG4uczGc9st/+rqKuVymVarxcrKCp7nUa/XabfbNBoNVldXabfb21q/
      UopcLkehUMC2bZaXl3Fdl2azSavVwnVdlpeXaTabD7R+4/vf//73t1xyF8zNzTE3N8fi4iKW
      ZXHv3j1qtRpzc3NEIhFu3brF3bt3OXHixLb2DouLi2QyGRYWFja/otEoly5d4syZM1y6dAnP
      8xgZGdlW+VdWVshms9y+fZv5+XkWFxdJJBK89tprTE1NMT8/z/Xr1xkdHSUcDj/0+pvNJvPz
      87z77rubFcl1Xd5++236+/s3Q5HP57fV8ZDJZCgWi7z77ruk02lWVlYIhUL84he/4Omnn2Zh
      YYFXX32V6enpBz6MvV+tVmN5eZl33nmHtbU1ms0mjUaDK1euEIlEuHnzJo7jkEwmCQQefmoY
      y7KYn5/nD3/4A6VSCdu2yeVy3Lhxg3a7zeLiIrVajf7+/gfqmezqUAhN00gmkziOQzgc5syZ
      MwCcOnWKaDRKsVjk5MmTRCKRbd9hZnh4mGw2y/j4OBMTE4yMjJBMJpmcnATg2Wef3dYHu2Fo
      aIiVlRWmpqYYHBxkYmKCcDjMiRMn0HWdUChELBajr69vW+sPh8M0Gg1OnDhBMBjkqaeeot1u
      b75XiUSC2dnZba8/lUoxPz/PiRMnGBsbY3x8nFgsxrFjx/A8j9/+9rekUqk/upfcSjwep1Qq
      8cQTT6DrOtPT05RKJZ577rnNv5/JZFhdXd3W+kOhEJZlcfz4cTzP49y5c5TLZc6fP49hGGSz
      WZrNJnfv3n2g9XU1AJ7n8ctf/pL+/n6i0Si/+tWvMAyDa9eucfv2bYLBIG+++SbNZnPblfT1
      118nEomg6zpzc3MsLy9TKpW4c+cON2/eZGZmhps3b277A37rrbcA/1Aik8kwNzdHs9lkdnaW
      a9eu8cYbb2x+SNuRz+e5ceMGjuNg2za/+93viEajXL16levXr3P79m2OHDlCoVDY1vqvXLmC
      Ugpd15mfn+fu3bvU63Xu3LnDrVu3uHjxIq7rbnt4y9LSEvPz87TbbTRN47XXXmNoaIiZmRmu
      X7++OWKg0yFcJ4VCgQ8++ADXdQmFQvzsZz9jeHh483MdHBzEsqwHLv//B3HeOXhIGBMkAAAA
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='income growth rate' width='192'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='income vs time' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='ineql vs time' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='network' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
